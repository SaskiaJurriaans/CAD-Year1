grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
capture_plot <- function() {
grid_arrange_shared_legend(
plot_survival_time,plot_size_site,
ncol = 1,
nrow = 2)
}
capture_plot()
# Save the plot using ggsave
ggsave("Figure descriptives.jpeg", plot = capture_plot(), width = 13, height = 6)
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
library(tidyverse)  #for data wrangling etc
library(rstanarm)   #for fitting models in STAN
#library(cmdstanr)   #for cmdstan --> does not work on AIMS computers
library(brms)       #for fitting models in STAN
#library(standist)   #for exploring distributions
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(DHARMa)     #for residual diagnostics
library(rstan)      #for interfacing with STAN
library(emmeans)    #for marginal means etc
library(broom)      #for tidying outputs
library(tidybayes)  #for more tidying outputs
library(HDInterval) #for HPD intervals
library(ggeffects)  #for partial plots
library(broom.mixed)#for summarising models
library(posterior)  #for posterior draws
library(ggeffects)  #for partial effects plots
library(patchwork)  #for multi-panel figures
library(bayestestR) #for ROPE
library(see)        #for some plots
library(readxl)     #to load excel documents
library(easystats)     #framework for stats, modelling and visualisation
#library(INLA)       #for approximate Bayes
library(openxlsx)    # to write excel documents
#library(INLAutils)  #for additional INLA outputs
theme_set(theme_grey()) #put the default ggplot theme back
library(lme4)
library(gridExtra)
library(gtable)
library(grid)
library(egg)
#source('helperFunctions.R')
#| label: import data
#| warning: false
#| message: false
survival <- read_excel("data/YEAR1_Survival.xlsx",
col_types = c("numeric", "skip", "text",
"skip", "skip", "numeric", "skip",
"text", "text", "numeric", "skip",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric"), na = "na")
environment <- read_excel ("data/YEAR1 Benthic Environment ReefDev.xlsx", na="na")
#| label: mutate survival
survival_size <- survival |>
mutate(Size = (LinLength_mm * PerpLenght_mm * Height_mm)/1000,
Size_log = log(Size + 1)) # Adding 1 to avoid log(0)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/sjurriaa/Australian Institute of Marine Science/Carly Randall - Randall Lab/CAD/CAD Year1")
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
library(tidyverse)  #for data wrangling etc
library(rstanarm)   #for fitting models in STAN
#library(cmdstanr)   #for cmdstan --> does not work on AIMS computers
library(brms)       #for fitting models in STAN
#library(standist)   #for exploring distributions
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(DHARMa)     #for residual diagnostics
library(rstan)      #for interfacing with STAN
library(emmeans)    #for marginal means etc
library(broom)      #for tidying outputs
library(tidybayes)  #for more tidying outputs
library(HDInterval) #for HPD intervals
library(ggeffects)  #for partial plots
library(broom.mixed)#for summarising models
library(posterior)  #for posterior draws
library(ggeffects)  #for partial effects plots
library(patchwork)  #for multi-panel figures
library(bayestestR) #for ROPE
library(see)        #for some plots
library(readxl)     #to load excel documents
library(easystats)     #framework for stats, modelling and visualisation
#library(INLA)       #for approximate Bayes
library(openxlsx)    # to write excel documents
#library(INLAutils)  #for additional INLA outputs
theme_set(theme_grey()) #put the default ggplot theme back
library(lme4)
library(gridExtra)
library(gtable)
library(grid)
library(egg)
#source('helperFunctions.R')
#| label: import data
#| warning: false
#| message: false
survival <- read_excel("data/YEAR1_Survival.xlsx",
col_types = c("numeric", "skip", "text",
"skip", "skip", "numeric", "skip",
"text", "text", "numeric", "skip",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric"), na = "na")
environment <- read_excel ("data/YEAR1 Benthic Environment ReefDev.xlsx", na="na")
#| label: mutate survival
survival_size <- survival |>
mutate(Size = (LinLength_mm * PerpLenght_mm * Height_mm)/1000,
Size_log = log(Size + 1)) # Adding 1 to avoid log(0)
#| label: filter moore
moore_surv <- survival_size |> filter (Reef == "Moore",
Census =="t6")
moore_env <- environment |>
filter (Reef == "Moore") |>
select(-c(Reef1, Device_ID))
heron_surv <- survival_size |> filter (Reef == "Heron",
Census == "t3")
heron_env <- environment |>
filter (Reef == "Heron") |>
select(-c(Reef1, Device_ID))
moore <- merge(moore_env, moore_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)
davies <- merge(davies_env, davies_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/sjurriaa/Australian Institute of Marine Science/Carly Randall - Randall Lab/CAD/CAD Year1")
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
library(tidyverse)  #for data wrangling etc
library(rstanarm)   #for fitting models in STAN
#library(cmdstanr)   #for cmdstan --> does not work on AIMS computers
library(brms)       #for fitting models in STAN
#library(standist)   #for exploring distributions
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(DHARMa)     #for residual diagnostics
library(rstan)      #for interfacing with STAN
library(emmeans)    #for marginal means etc
library(broom)      #for tidying outputs
library(tidybayes)  #for more tidying outputs
library(HDInterval) #for HPD intervals
library(ggeffects)  #for partial plots
library(broom.mixed)#for summarising models
library(posterior)  #for posterior draws
library(ggeffects)  #for partial effects plots
library(patchwork)  #for multi-panel figures
library(bayestestR) #for ROPE
library(see)        #for some plots
library(readxl)     #to load excel documents
library(easystats)     #framework for stats, modelling and visualisation
#library(INLA)       #for approximate Bayes
library(openxlsx)    # to write excel documents
#library(INLAutils)  #for additional INLA outputs
theme_set(theme_grey()) #put the default ggplot theme back
library(lme4)
library(gridExtra)
library(gtable)
library(grid)
library(egg)
#source('helperFunctions.R')
#| label: import data
#| warning: false
#| message: false
survival <- read_excel("data/YEAR1_Survival.xlsx",
col_types = c("numeric", "skip", "text",
"skip", "skip", "numeric", "skip",
"text", "text", "numeric", "skip",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric"), na = "na")
environment <- read_excel ("data/YEAR1 Benthic Environment ReefDev.xlsx", na="na")
#| label: mutate survival
survival_size <- survival |>
mutate(Size = (LinLength_mm * PerpLenght_mm * Height_mm)/1000,
Size_log = log(Size + 1)) # Adding 1 to avoid log(0)
#| label: filter moore
moore_surv <- survival_size |> filter (Reef == "Moore",
Census =="t6")
moore_env <- environment |>
filter (Reef == "Moore") |>
select(-c(Reef1, Device_ID))
heron_surv <- survival_size |> filter (Reef == "Heron",
Census == "t3")
heron_env <- environment |>
filter (Reef == "Heron") |>
select(-c(Reef1, Device_ID))
moore <- merge(moore_env, moore_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)
davies <- merge(davies_env, davies_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)
#| label: filter davies
davies_surv <- survival_size |> filter (Reef == "Davies",
Census == "t6")
davies_env <- environment |>
filter (Reef == "Davies") |>
select(-c(Reef1, Device_ID))
heron_surv <- survival_size |> filter (Reef == "Heron",
Census == "t3")
heron_env <- environment |>
filter (Reef == "Heron") |>
select(-c(Reef1, Device_ID))
moore <- merge(moore_env, moore_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)
davies <- merge(davies_env, davies_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)
heron <- merge(heron_env, heron_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)
#free up space
remove(moore_surv, moore_env)
remove(davies_surv, davies_env)
remove(heron_surv, heron_env)
remove(survival_size)
moore$SurvDev <- as.numeric(moore$SurvDev)
moore <- moore[complete.cases(moore$Size),  ]
davies$SurvDev <- as.numeric(davies$SurvDev)
davies <- davies[complete.cases(davies$Size),  ]
heron$SurvDev <- as.numeric(heron$SurvDev)
heron <- heron[complete.cases(heron$Size),  ]
moore <- moore |>
group_by(Site) |>
mutate(
Ub_avrg = ifelse(is.na(Ub_avrg), max(Ub_avrg, na.rm=TRUE), Ub_avrg),
median_speed = ifelse(is.na(median_speed), max(median_speed, na.rm = TRUE), median_speed),
percentile_10 =  ifelse(is.na(percentile_10), max(percentile_10, na.rm = TRUE), percentile_10),
percentile_90 =  ifelse(is.na(percentile_90), max(percentile_90, na.rm = TRUE), percentile_90),
range  =  ifelse(is.na(range), max(range, na.rm = TRUE), range),
mean_temp = ifelse(is.na(mean_temp), max(mean_temp, na.rm = TRUE), mean_temp),
sedturf_t5 = ifelse(is.na(sedturf_t5), max(sedturf_t5, na.rm = TRUE), sedturf_t5),
sedconcrete_t5 = ifelse(is.na(sedconcrete_t5), max(sedconcrete_t5, na.rm = TRUE), sedconcrete_t5)
) |>
ungroup()
davies <- davies |>
group_by(Site) |>
mutate(
Ub_avrg = ifelse(is.na(Ub_avrg), max(Ub_avrg, na.rm=TRUE), Ub_avrg),
median_speed = ifelse(is.na(median_speed), max(median_speed, na.rm = TRUE), median_speed),
percentile_10 =  ifelse(is.na(percentile_10), max(percentile_10, na.rm = TRUE), percentile_10),
percentile_90 =  ifelse(is.na(percentile_90), max(percentile_90, na.rm = TRUE), percentile_90),
range  =  ifelse(is.na(range), max(range, na.rm = TRUE), range),
mean_temp = ifelse(is.na(mean_temp), max(mean_temp, na.rm = TRUE), mean_temp),
sedturf_t2 = ifelse(is.na(sedturf_t2), max(sedturf_t2, na.rm = TRUE), sedturf_t2),
sedconcrete_t2 = ifelse(is.na(sedconcrete_t2), max(sedconcrete_t2, na.rm = TRUE), sedconcrete_t2),
sedturf_t5 = ifelse(is.na(sedturf_t5), max(sedturf_t5, na.rm = TRUE), sedturf_t5),
sedconcrete_t5 = ifelse(is.na(sedconcrete_t5), max(sedconcrete_t5, na.rm = TRUE), sedconcrete_t5)
) |>
ungroup()
davies <- davies |>
group_by(Site) |>
mutate(sedturf = ((sedturf_t2+sedturf_t5)/2),
sedconcrete = ((sedconcrete_t2+sedconcrete_t5)/2)
) |>
select(-c(sedturf_t2, sedturf_t5, sedconcrete_t2, sedconcrete_t5))
heron <- heron |>
group_by(Site) |>
mutate(
Ub_avrg = ifelse(is.na(Ub_avrg), max(Ub_avrg, na.rm=TRUE), Ub_avrg),
median_speed = ifelse(is.na(median_speed), max(median_speed, na.rm = TRUE), median_speed),
percentile_10 =  ifelse(is.na(percentile_10), max(percentile_10, na.rm = TRUE), percentile_10),
percentile_90 =  ifelse(is.na(percentile_90), max(percentile_90, na.rm = TRUE), percentile_90),
sedturf_t2 = ifelse(is.na(sedturf_t2), max(sedturf_t2, na.rm = TRUE), sedturf_t2),
sedconcrete_t2 = ifelse(is.na(sedconcrete_t2), max(sedconcrete_t2, na.rm = TRUE), sedconcrete_t2),
range  =  ifelse(is.na(range), max(range, na.rm = TRUE), range),
mean_temp = ifelse(is.na(mean_temp), max(mean_temp, na.rm = TRUE), mean_temp)
) |>
ungroup()
moore$Site <- as.factor(moore$Site)
moore$ReefDev<- as.factor(moore$ReefDev)
# Decide on the number of bins
num_bins <- 10  # You can adjust this number based on your needs
# Convert median_speed to a categorical variable using cut
moore$median_speed_cat <- cut(moore$median_speed, breaks = num_bins, labels = FALSE)
moore$median_speed_cat <- as.factor(moore$median_speed_cat)
# Check the result
table(moore$median_speed_cat)
moore_lmer1a <- lmer(Size_log ~ (1|Site), data=moore)
moore_lmer1b <- lmer(Size_log ~ (1|ReefDev), data=moore)
moore_lmer1c <- lmer(Size_log ~ (1|Site) + (1|ReefDev), data=moore)
moore_lmer_nested <- lmer(Size_log ~ (1 | Site / ReefDev), data = moore)
AIC(moore_lmer1a, moore_lmer1b, moore_lmer1c, moore_lmer_nested)
summary(moore_lmer1a)
summary(moore_lmer1b)
summary(moore_lmer1c)
summary(moore_lmer_nested)
Make Site and ReefDev (id) as factors
moore_lmer1a <- lmer(Size_log ~ (1|Site), data=moore)
moore_lmer1b <- lmer(Size_log ~ (1|ReefDev), data=moore)
moore_lmer1c <- lmer(Size_log ~ (1|Site) + (1|ReefDev), data=moore)
moore_lmer_nested <- lmer(Size_log ~ (1 | Site / ReefDev), data = moore)
AIC(moore_lmer1a, moore_lmer1b, moore_lmer1c, moore_lmer_nested)
summary(moore_lmer1a)
summary(moore_lmer1b)
summary(moore_lmer1c)
summary(moore_lmer_nested)
moore_lmer2 <- lmer(Size_log ~ Ub_avrg + (1 | Site / ReefDev), data=moore)
moore_lmer3 <- lmer(Size_log ~ WaveEnergyLevel + (1 | Site / ReefDev), data=moore)
moore_lmer4 <- lmer(Size_log ~ median_speed + (1 | Site / ReefDev), data=moore)
moore_lmer4cat <- lmer(Size_log ~ median_speed_cat + (1 | Site / ReefDev), data=moore)
moore_lmer5 <- lmer(Size_log ~ sedturf_t5 + sedconcrete_t5 + (1 | Site / ReefDev), data=moore)
moore_lmer6 <- lmer(Size_log ~ sedturf_t5 + (1 | Site / ReefDev), data=moore)
moore_lmer7 <- lmer(Size_log ~ sedconcrete_t5 + (1 | Site / ReefDev), data=moore)
moore_lmer8 <- lmer(Size_log ~ PC1 + PC2 + (1 | Site / ReefDev), data=moore)
summary(moore_lmer2)
summary(moore_lmer3)
summary(moore_lmer4)
summary(moore_lmer4cat)
summary(moore_lmer5)
summary(moore_lmer6)
summary(moore_lmer7)
summary(moore_lmer8)
AIC(moore_lmer1c, moore_lmer2, moore_lmer3, moore_lmer4,moore_lmer4cat, moore_lmer5, moore_lmer6, moore_lmer7, moore_lmer8)
Make Site and ReefDev (id) as factors
```{r}
```{r}
load(file = "scripts/models/moore/size/moore_brm0_size.RData")
load(file = "scripts/models/moore/size/moore_brm1_size.RData")
load(file = "scripts/models/moore/size/moore_brm2_size.RData")
load(file = "scripts/models/moore/size/moore_brm3_size.RData")
load(file = "scripts/models/moore/size/moore_brm4_size.RData")
load(file = "scripts/models/moore/size/moore_brm5_size.RData")
load(file = "scripts/models/moore/size/moore_brm6_size.RData")
#OR models with (1|Site/ReefDev) as random effect
load(file = "scripts/models/moore/size/moore_brm1_nested.RData")
load(file = "scripts/models/moore/size/moore_brm2_nested.RData")
#OR models with (1|ReefDev) as random effect
load(file = "scripts/models/moore/size/moore_brm1_reefdev.RData")
load(file = "scripts/models/davies/size/davies_brm1_size.RData")
load(file = "scripts/models/davies/size/davies_brm2_size.RData")
load(file = "scripts/models/davies/size/davies_brm3_size.RData")
load(file = "scripts/models/davies/size/davies_brm4_size.RData")
load(file = "scripts/models/davies/size/davies_brm5_size.RData")
load(file = "scripts/models/davies/size/davies_brm8_size.RData")
#OR models with (1|Site/ReefDev) as random effect
#load(file = "scripts/models/davies/size/davies_brm1_nested.RData")
load(file = "scripts/models/heron/size/heron_brm0_size_Spp.RData")
load(file = "scripts/models/heron/size/heron_brm1_size_Spp.RData")
load(file = "scripts/models/heron/size/heron_brm2_size_Spp.RData")
load(file = "scripts/models/heron/size/heron_brm3_size_Spp.RData")
load(file = "scripts/models/heron/size/heron_brm4_size_Spp.RData")
load(file = "scripts/models/heron/size/heron_brm5_size_Spp.RData")
load(file = "scripts/models/heron/size/heron_brm6_size_Spp.RData")
load(file = "scripts/models/heron/size/heron_brm7_size_Spp_sed.RData")
load(file = "scripts/models/heron/size/heron_brm8_size_Spp_sedt2.RData")
#OR models with (1|Site/ReefDev) as random effect
#load(file = "scripts/models/heron/size/heron_brm1_size_nested.RData")
#OR models with (1|ReefDev) as random effect
#load(file = "scripts/models/heron/size/heron_brm1_size_reefdev.RData")
moore_variables <- moore |>
select(c(Spp, Size_log, Ub_avrg, WaveEnergyLevel, sedturf_t5, sedconcrete_t5, median_speed))
moore_variables_new <- data.frame(
Ub_avrg = NA,  # Use NA since there are no actual values
WaveEnergyLevel = NA,
sedturf_t5 = NA,
sedconcrete_t5 = NA,
median_speed = NA,
Size_log = NA,
Spp = c("A. hyacinthus", "A. kenti")
)
# Combine the new species data with the original moore data
moore_combined <- rbind(moore_variables, moore_variables_new)
remove(moore_variables)
remove(moore_variables_new)
new_species_moore <- data.frame(
Ub_avrg = rep(NA, length(10)),
WaveEnergyLevel = rep(NA, length(10)),
sedturf_t5 = rep(NA, length(10)),
sedconcrete_t5 = rep(NA, length(10)),
median_speed = rep(NA, length(10)),
Spp = c("A. hyacinthus", "A. kenti"),
Fitted = NA,
Lower = NA,
Upper = NA
)
moore_brm1 <- new_species_moore |>
select(c(WaveEnergyLevel, Spp, Fitted, Lower, Upper))
moore_brm2 <- new_species_moore |>
select(c(Ub_avrg, Spp, Fitted, Lower, Upper))
moore_brm3 <- new_species_moore |>
select(c(median_speed, Spp, Fitted, Lower, Upper))
moore_brm4 <- new_species_moore |>
select(c(sedturf_t5, Spp, Fitted, Lower, Upper))
moore_brm5 <- new_species_moore |>
select(c(sedconcrete_t5, Spp, Fitted, Lower, Upper))
# Extract fitted values and predictors
fitted_values_moore_brm2 <- fitted(moore_brm2_size, summary = FALSE)
predicted_data_moore_brm2 <- data.frame(
Ub_avrg = moore$Ub_avrg,
Spp = moore$Spp,
Fitted = apply(fitted_values_moore_brm2, 2, mean),
Lower = apply(fitted_values_moore_brm2, 2, function(x) quantile(x, 0.025)),
Upper = apply(fitted_values_moore_brm2, 2, function(x) quantile(x, 0.975)) )
# Combine the new species data with the original predicted data
predicted_data_moore_brm2 <- rbind(predicted_data_moore_brm2, moore_brm2)
predicted_data_moore_brm2 <- predicted_data_moore_brm2 |>
group_by(Ub_avrg) |>
summarise(
Fitted = mean(Fitted, na.rm = TRUE),
Lower = mean(Lower, na.rm = TRUE),
Upper = mean(Upper, na.rm = TRUE)
)
# Create the plot with points, error bars, and raw data
plot_moore_Ub<- ggplot() +
geom_jitter(data = moore_combined, aes(x = Ub_avrg, y = Size_log, color = Spp), alpha = 0.5, width = 0.008, height = 0) +
geom_errorbar(data = predicted_data_moore_brm2, aes(x = Ub_avrg, ymin = Lower, ymax = Upper), color = "black", width = 0.01, alpha = 0.5) +
geom_point(data = predicted_data_moore_brm2, aes(x = Ub_avrg, y = Fitted), color = "black") +
labs(
color = "Species",
fill = "Species") +
scale_color_manual(values = c("A. hyacinthus" = "orange", "A. kenti" = "purple", "A. millepora" = "green")) +
theme_minimal() +
xlab("Bottom stress\n(m s-1)")+
theme( axis.text.x = element_text(size = 12),  # Increase x-axis tick label size
axis.text.y = element_text(size = 12),  # Increase y-axis tick label size.
axis.title.x = element_text(size = 13),  # Increase x-axis title size
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(0.25, "cm"),
axis.title.y = element_blank()
)
plot(plot_moore_Ub)
# Extract fitted values and predictors
fitted_values_moore_brm1 <- fitted(moore_brm1_size, summary = FALSE)
predicted_data_moore_brm1 <- data.frame(
WaveEnergyLevel = moore$WaveEnergyLevel,
Spp = moore$Spp,
Fitted = apply(fitted_values_moore_brm1, 2, mean),
Lower = apply(fitted_values_moore_brm1, 2, function(x) quantile(x, 0.025)),
Upper = apply(fitted_values_moore_brm1, 2, function(x) quantile(x, 0.975)) )
# Combine the new species data with the original predicted data
predicted_data_moore_brm1 <- rbind(predicted_data_moore_brm1, moore_brm1)
predicted_data_moore_brm1 <- predicted_data_moore_brm1 |>
group_by(WaveEnergyLevel) |>
summarise(
Fitted = mean(Fitted, na.rm = TRUE),
Lower = mean(Lower, na.rm = TRUE),
Upper = mean(Upper, na.rm = TRUE)
)
# Create the plot with points, error bars, and raw data
plot_moore_WaveEnergyLevel <- ggplot() +
# Plot the raw data points, colored in green
geom_jitter(data = moore_combined, aes(x = WaveEnergyLevel, y = Size_log, color = Spp), alpha = 0.5, width = 0.1, height = 0) +
geom_errorbar(data = predicted_data_moore_brm1, aes(x = WaveEnergyLevel, ymin = Lower, ymax = Upper), color = "black", width = 0.1, alpha = 0.5) +
geom_point(data = predicted_data_moore_brm1, aes(x = WaveEnergyLevel, y = Fitted), color = "black") +
labs(
x = "Wave Energy Level",
y = "Predicted growth log (mm3)",
color = "Species",
fill = "Species") +
scale_color_manual(values = c("A. hyacinthus" = "orange", "A. kenti" = "purple", "A. millepora" = "green")) +
theme_minimal() +
xlab("Nom. Wave Energy Level")+
theme( axis.text.x = element_text(size = 12),  # Increase x-axis tick label size
axis.text.y = element_text(size = 12),  # Increase y-axis tick label size.
axis.title.x = element_text(size = 13),  # Increase x-axis title size
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(0.25, "cm"),
axis.title.y = element_blank()
)
plot(plot_moore_WaveEnergyLevel)
# Extract fitted values and predictors
fitted_values_moore_brm3 <- fitted(moore_brm3_size, summary = FALSE)
predicted_data_moore_brm3 <- data.frame(
median_speed = moore$median_speed,
Spp = moore$Spp,
Fitted = apply(fitted_values_moore_brm3, 2, mean),
Lower = apply(fitted_values_moore_brm3, 2, function(x) quantile(x, 0.025)),
Upper = apply(fitted_values_moore_brm3, 2, function(x) quantile(x, 0.975))
)
# Combine the new species data with the original predicted data
predicted_data_moore_brm3 <- rbind(predicted_data_moore_brm3, moore_brm3)
predicted_data_moore_brm3 <- predicted_data_moore_brm3 |>
group_by(median_speed) |>
summarise(
Fitted = mean(Fitted, na.rm = TRUE),
Lower = mean(Lower, na.rm = TRUE),
Upper = mean(Upper, na.rm = TRUE)
)
# Create the plot with points, error bars, and raw data
plot_moore_speed<- ggplot() +
geom_jitter(data = moore_combined, aes(x = median_speed, y = Size_log, color = Spp), alpha = 0.5, width = 0.0025, height = 0) +
geom_errorbar(data = predicted_data_moore_brm3, aes(x = median_speed, ymin = Lower, ymax = Upper), color = "black", width = 0.0025, alpha = 0.5) +
geom_point(data = predicted_data_moore_brm3, aes(x = median_speed, y = Fitted), color = "black") +
labs(
x = "Median flow velocity\n(m s-1)",
y = "Predicted growth (mm3)",
color = "Species",
fill = "Species") +
scale_color_manual(values = c("A. hyacinthus" = "orange", "A. kenti" = "purple", "A. millepora" = "green")) +
theme_minimal() +
theme( axis.text.x = element_text(size = 12),  # Increase x-axis tick label size
axis.text.y = element_text(size = 12),  # Increase y-axis tick label size.
axis.title.x = element_text(size = 13),  # Increase x-axis title size
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(0.25, "cm"),
axis.title.y = element_blank()
)
plot(plot_moore_speed)
{r}
