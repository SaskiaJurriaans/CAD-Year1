#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
library(tidyverse)  #for data wrangling etc
library(rstanarm)   #for fitting models in STAN
#library(cmdstanr)   #for cmdstan --> does not work on AIMS computers
library(brms)       #for fitting models in STAN
library(standist)   #for exploring distributions
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(DHARMa)     #for residual diagnostics
library(rstan)      #for interfacing with STAN
library(emmeans)    #for marginal means etc
library(broom)      #for tidying outputs
library(tidybayes)  #for more tidying outputs
library(HDInterval) #for HPD intervals
library(ggeffects)  #for partial plots
library(broom.mixed)#for summarising models
library(posterior)  #for posterior draws
library(ggeffects)  #for partial effects plots
library(patchwork)  #for multi-panel figures
library(bayestestR) #for ROPE
library(see)        #for some plots
library(readxl)     #to load excel documents
library(easystats)     #framework for stats, modelling and visualisation
#library(INLA)       #for approximate Bayes
#library(INLAutils)  #for additional INLA outputs
theme_set(theme_grey()) #put the default ggplot theme back
source('helperFunctions.R')
survival <- read_excel("C:/Users/sjurriaa/Australian Institute of Marine Science/Carly Randall - Randall Lab/CAD/CAD Field Data/2022_Deployment_Saskia_YEAR1/Survival data/R/dataframes/Survival_merged_normalized.xlsx",
col_types = c("text", "text", "text",
"date", "numeric", "date", "numeric",
"text", "text", "text", "numeric",
"skip", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"), na = "NA")
glimpse(survival)
head(survival)
str(survival)
survival |> datawizard::data_codebook()
survival <- survival |> mutate(Reef = factor(Reef),
#  WaveEnergyLevel = factor(WaveEnergyLevel),
ReefDev = factor(ReefDev),
Census = factor(Census))
davies <- survival |> filter(Reef == "Davies", Tab_ID == 1, Census == "t6")
moore <- survival |> filter (Reef == "Moore", Tab_ID == 1, Census == "t6")
heron <- survival |> filter (Reef == "Heron", Tab_ID == 1, Census == "t2")
heron |> datawizard::data_codebook()
ggplot(data=heron, aes(y = SurvDev, x = WaveEnergyLevel)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
# facet_wrap(~WaveEnergyLevel) +
geom_smooth(method="lm")
ggplot(data=heron, aes(y = SurvDev, x = Ub_avrg)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
# facet_wrap(~WaveEnergyLevel) +
geom_smooth(method="lm")
ggplot(data=heron, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
# facet_wrap(~WaveEnergyLevel) +
geom_smooth(method="lm")
#to find our priors, we need to take 2.5*sd(REPSONSE)/sd(PREDICTOR))
2.5 * sd(heron_clean$SurvDev, na.rm = TRUE)/sd(heron_clean$median_speed, na.rm = TRUE)
# Remove rows with missing values
heron_clean <- heron[complete.cases(heron$SurvDev),  ]
davies <- survival |> filter(Reef == "Davies", Tab_ID == 1, Census == "t6")
moore <- survival |> filter (Reef == "Moore", Tab_ID == 1, Census == "t6")
heron <- survival |> filter (Reef == "Heron", Tab_ID == 1, Census == "t2")
# Remove rows with missing values
davies_clean <- davies[complete.cases(davies$SurvDev),  ]
moore_clean <- moore[complete.cases(moore$SurvDev),  ]
heron_clean <- heron[complete.cases(heron$SurvDev),  ]
#to find our priors, we need to take 2.5*sd(REPSONSE)/sd(PREDICTOR))
2.5 * sd(heron_clean$SurvDev, na.rm = TRUE)/sd(heron_clean$median_speed, na.rm = TRUE)
priors <- prior(student_t(3, 0, 2.5), class="Intercept") +
prior(normal(0,30), class = "b")
heron.form.speed <- bf(SurvDev ~ median_speed,
family = bernoulli(link='logit'))
heron.speed.brm <- brm(heron.form.speed,
data=heron_clean,
prior = priors,
sample_prior = "yes",
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
# To save the model use >>
save(heron.speed.brm, file = "Survival_heron.speed.brm.RData")
# to load the model back in workspace >> load(file = "Survival_heron.speed.brm.RData")
save(heron.speed.brm, file = "survival_heron.speed.brm.RData")
getwd()
save(heron.speed.brm, file = "data/survival_heron.speed.brm.RData")
file.path(getwd()
)
file.path("~")
file.path("")
# To save the model use >>
save(heron.speed.brm, file = "data/survival_heron.speed.brm.RData")
save(heron.speed.brm, file = "data/survival_heron.speed.brm.RData")
file.path("~\data")
file.path("data")
file.path(getwd(), "data")
save(heron.speed.brm, file = "data/survival_heron.speed.brm.RData")
# To save the model use >>
save(heron.speed.brm, file = "data/survival_heron.speed.brm.RData")
# To load the model back in workspace >>
#MAY NEED TO RUN THIS IN CONSOLE TO WROK
load(file = "data/survival_heron.speed.brm.RData")
load(file = "data/survival_heron.speed.brm.RData")
load(file = "data/survival_heron.speed.brm.RData")
survival <- read_excel("C:/Users/sjurriaa/Australian Institute of Marine Science/Carly Randall - Randall Lab/CAD/CAD Field Data/2022_Deployment_Saskia_YEAR1/Survival data/R/dataframes/Survival_merged_normalized.xlsx",
col_types = c("text", "text", "text",
"date", "numeric", "date", "numeric",
"text", "text", "text", "numeric",
"skip", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"), na = "NA")
survival <- survival |> mutate(Reef = factor(Reef),
#  WaveEnergyLevel = factor(WaveEnergyLevel),
ReefDev = factor(ReefDev),
Census = factor(Census))
davies <- survival |> filter(Reef == "Davies", Tab_ID == 1, Census == "t6")
moore <- survival |> filter (Reef == "Moore", Tab_ID == 1, Census == "t6")
heron <- survival |> filter (Reef == "Heron", Tab_ID == 1, Census == "t2")
# Remove rows with missing values
davies_clean <- davies[complete.cases(davies$SurvDev),  ]
moore_clean <- moore[complete.cases(moore$SurvDev),  ]
heron_clean <- heron[complete.cases(heron$SurvDev),  ]
heron.speed.brm |> ggemmeans(~median_speed) |> plot(add.data = TRUE)
heron.speed.brm |> conditional_effects() |> plot(points = TRUE)
#heron.speed.brm |> conditional_effects("median_speed", conditions = list(Census=c("t0", "t1", "t2", "t3", "t4", "t6"))) |> plot(points = TRUE)
heron.speed.brm |> summary()
exp(-0.86)
exp(12.29)
exp(-1.84)
exp(0.09)
exp(5.24)
exp(19.83)
heron.speed.brm$fit |> tidyMCMC(estimate.method = "median",
conf.int = TRUE,
conf.method = "HPDinterval",
rhat = TRUE,
ess = TRUE,
exponential = TRUE)
heron.speed.brm$fit |> tidyMCMC(estimate.method = "median",
conf.int = TRUE,
conf.method = "HPDinterval",
rhat = TRUE,
ess = TRUE,
exponential = TRUE)
heron.speed.brm |> as_draws_df()  |>
dplyr::select(matches("^b_.*"))
heron.speed.brm |> as_draws_df()
test<- heron.speed.brm |> as_draws_df()
View(test)
test<- heron.speed.brm |> as_draws_df()  |>
dplyr::select(matches("^b_.*"))
View(test)
test<- heron.speed.brm |> as_draws_df()  |>
dplyr::select(matches("^b_.*")) |>    # a more sophisticated way of selecting (and searching) for pattersn in our column headers
mutate(across(everything(), exp))
View(test)
test<- heron.speed.brm |> as_draws_df()  |>
dplyr::select(matches("^b_.*")) |>    # a more sophisticated way of selecting (and searching) for pattersn in our column headers
mutate(across(everything(), exp)) |>
summarise_draws("median",            #  for every column calculate the median
~HDInterval::hdi(.x), #  highest density intervals come from a specific package and threfore you need to specify the package it comes from, and therefore you need to put a ~ infront of it, and (.x)
"rhat",               # for every column give me the rhat
"ess_bulk",           # for every column give me the ess_bulk
P = ~mean(.x <1)) |>    # what is the probability that there is any #                                         effect (100%)
knitr::kable()
test<- heron.speed.brm |> as_draws_df()  |>
dplyr::select(matches("^b_.*")) |>    # a more sophisticated way of selecting (and searching) for pattersn in our column headers
mutate(across(everything(), exp)) |>
summarise_draws("median",            #  for every column calculate the median
~HDInterval::hdi(.x), #  highest density intervals come from a specific package and threfore you need to specify the package it comes from, and therefore you need to put a ~ infront of it, and (.x)
"rhat",               # for every column give me the rhat
"ess_bulk",           # for every column give me the ess_bulk
P = ~mean(.x <1))
View(test)
View(test)
write.xlsx(heron.speed.brm.tidy, file = "data/Heron survival-speed brm tidy_odds ratio.xlsx") #Saving this data for interpretation in a manuscript
#library(INLA)       #for approximate Bayes
library(writexl)    # to write excel documents
write.xlsx(heron.speed.brm.tidy, file = "data/Heron survival-speed brm tidy_odds ratio.xlsx") #Saving this data for interpretation in a manuscript
write.xlsx(heron.speed.brm.tidy, file = "data/Heron survival-speed brm tidy_odds ratio.xlsx") #Saving this data for interpretation in a manuscript
#library(INLA)       #for approximate Bayes
library(openxlsx)    # to write excel documents
write.xlsx(heron.speed.brm.tidy, file = "data/Heron survival-speed brm tidy_odds ratio.xlsx") #Saving this data for interpretation in a manuscript
heron.speed.brm.tidy <- heron.speed.brm |> as_draws_df()  |>
dplyr::select(matches("^b_.*")) |>    # a more sophisticated way of selecting (and searching) for pattersn in our column headers
mutate(across(everything(), exp)) |>
summarise_draws("median",            #  for every column calculate the median
~HDInterval::hdi(.x), #  highest density intervals come from a specific package and threfore you need to specify the package it comes from, and therefore you need to put a ~ infront of it, and (.x)
"rhat",               # for every column give me the rhat
"ess_bulk",           # for every column give me the ess_bulk
P = ~mean(.x <1),    # what is the probability that there is any effect (100%)
P5 = ~mean(.x <0.95),  # what is the probability that there is a 5% decline?
P50= ~mean(.x <0.5)) # what is the probability that there is a 50% decline?
write.xlsx(heron.speed.brm.tidy, file = "data/Heron survival-speed brm tidy_odds ratio.xlsx") #Saving this data for interpretation in a manuscript
write.xlsx(heron.speed.brm.tidy, file = "data/Heron survival-speed brm tidy_odds ratio.xlsx") #Saving this data for interpretation in a manuscript
# To save the model use >>
save(heron.speed.brm, file = "scripts/models/survival_heron.speed.brm.RData")
load(file = "scripts/models/survival_heron.speed.brm.RData")
load(file = "scripts/models/survival_heron.speed.brm.RData")
heron.speed.brm |>
bayes_R2(summary = FALSE) |>
median_hdci()
heron.speed.brm |>
as_draws_df() |>
dplyr::select(matches("^b_.*")) |>
mutate(LD50 = -1*b_Intercept / b_median_speed) |>
median_hdci(LD50)
