geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method="lm")
str(heron_env)
str(heron_t2)
heron_t2 <- heron_t2 |> select(-c(sedturf_t5, sedconcrete_t5))
str(heron_t2)
heron_t2$Site <- as.factor(heron_t2$Site)
heron_t2$ReefDev<- as.factor(heron_t2$ReefDev)
heron_glmer1<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer2<- glmer(SurvDev ~ (Site|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_t2$Site <- as.factor(heron_t2$Site)
heron_t2$ReefDev<- as.factor(heron_t2$ReefDev)
heron_glmer1<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer2<- glmer(SurvDev ~ (ReefDev|Site), data=heron_t2, family = binomial(link = "logit"))
heron_t2$Site <- as.factor(heron_t2$Site)
heron_t2$ReefDev<- as.factor(heron_t2$ReefDev)
heron_glmer1<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit")) #allowing for random intercepts but not random slopes --> accounting for potential variability in survival beteeen different sites and devices, but assuming that the effect of device on  survival is constant across different sites.
heron_glmer2<- glmer(SurvDev ~ Ub_avrg + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer3<- glmer(SurvDev ~ WaveEnergyLevel + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer4<- glmer(SurvDev ~ median_speed + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer5<- glmer(SurvDev ~ sedturf_t2 + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
summary(heron_glmer1)
AIC(heron_glmer1, heronSpp_glmer1)
heron_t2$Site <- as.factor(heron_t2$Site)
heron_t2$ReefDev<- as.factor(heron_t2$ReefDev)
heron_glmer1<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit")) #allowing for random intercepts but not random slopes --> accounting for potential variability in survival beteeen different sites and devices, but assuming that the effect of device on  survival is constant across different sites.
heron_glmer2<- glmer(SurvDev ~ Ub_avrg + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer3<- glmer(SurvDev ~ WaveEnergyLevel + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer4<- glmer(SurvDev ~ median_speed + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer5<- glmer(SurvDev ~ sedturf_t2 + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
summary(heron_glmer1)
summary(heron_glmer2)
summary(heron_glmer3)
summary(heron_glmer4)
summary(heron_glmer5)
AIC(heronSpp_glmer1, heron_glmer1, heron_glmer2, heron_glmer3, heron_glmer4, heron_glmer5)
library(lme4)
heron_Spp_t2$Site <- as.factor(heron_Spp_t2$Site)
heron_Spp_t2$ReefDev<- as.factor(heron_Spp_t2$ReefDev)
heron_Spp_t2$Spp<- as.factor(heron_Spp_t2$Spp)
heronSpp_glmer1<- glmer(SurvDev_Spp ~ (1|Site) + (1|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer2<- glmer(SurvDev_Spp ~ (1|Site) + (Spp|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer3<- glmer(SurvDev_Spp ~ Spp + (1|Site) + (1|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer4<- glmer(SurvDev_Spp ~ Spp + (1|Site) + (Spp|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
summary(heronSpp_glmer1)
summary(heronSpp_glmer2)
summary(heronSpp_glmer3)
summary(heronSpp_glmer4)
AIC(heronSpp_glmer1, heronSpp_glmer2, heronSpp_glmer3, heronSpp_glmer4)
library(lme4)
heron_Spp_t2$Site <- as.factor(heron_Spp_t2$Site)
heron_Spp_t2$ReefDev<- as.factor(heron_Spp_t2$ReefDev)
heron_Spp_t2$Spp<- as.factor(heron_Spp_t2$Spp)
heronSpp_glmer1<- glmer(SurvDev_Spp ~ (1|Site) + (1|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer2<- glmer(SurvDev_Spp ~ (1|Site) + (Spp|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer3<- glmer(SurvDev_Spp ~ Spp + (1|Site) + (1|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer4<- glmer(SurvDev_Spp ~ Spp + (1|Site) + (Spp|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer5<- glmer(SurvDev_Spp ~ Ub_avrg + (1|Site) + (1|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer6<- glmer(SurvDev_Spp ~ WaveEnergyLevel + (1|Site) + (1|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer7<- glmer(SurvDev_Spp ~ median_speed + (1|Site) + (1|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
heronSpp_glmer8<- glmer(SurvDev_Spp ~ sedturf_t2 + (1|Site) + (1|ReefDev), data=heron_Spp_t2, family = binomial(link = "logit"))
summary(heronSpp_glmer1)
summary(heronSpp_glmer2)
summary(heronSpp_glmer3)
summary(heronSpp_glmer4)
AIC(heronSpp_glmer1, heronSpp_glmer2, heronSpp_glmer3, heronSpp_glmer4, heronSpp_glmer5, heronSpp_glmer6, heronSpp_glmer7, heronSpp_glmer8)
heron_t2$Site <- as.factor(heron_t2$Site)
heron_t2$ReefDev<- as.factor(heron_t2$ReefDev)
heron_glmer1<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit")) #allowing for random intercepts but not random slopes --> accounting for potential variability in survival beteeen different sites and devices, but assuming that the effect of device on  survival is constant across different sites.
heron_glmer2<- glmer(SurvDev ~ Ub_avrg + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer3<- glmer(SurvDev ~ WaveEnergyLevel + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer4<- glmer(SurvDev ~ median_speed + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer5<- glmer(SurvDev ~ sedturf_t2 + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
summary(heron_glmer1)
summary(heron_glmer2)
summary(heron_glmer3)
summary(heron_glmer4)
summary(heron_glmer5)
AIC(heronSpp_glmer1, heron_glmer1, heron_glmer2, heron_glmer3, heron_glmer4, heron_glmer5)
heron_t2$Site <- as.factor(heron_t2$Site)
heron_t2$ReefDev<- as.factor(heron_t2$ReefDev)
heron_glmer1<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit")) #allowing for random intercepts but not random slopes --> accounting for potential variability in survival beteeen different sites and devices, but assuming that the effect of device on  survival is constant across different sites.
heron_glmer2<- glmer(SurvDev ~ Ub_avrg + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer3<- glmer(SurvDev ~ WaveEnergyLevel + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer4<- glmer(SurvDev ~ median_speed + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer5<- glmer(SurvDev ~ sedturf_t2 + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
summary(heron_glmer1)
summary(heron_glmer2)
summary(heron_glmer3)
summary(heron_glmer4)
summary(heron_glmer5)
AIC(heronSpp_glmer1, heron_glmer1, heron_glmer2, heron_glmer3, heron_glmer4, heron_glmer5, heronSpp_glmer7)
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Site) +
geom_smooth(method="lm")
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Site) +
geom_smooth(method="lm")
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Site) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_grip(Site ~ ReefDev) +
geom_smooth(method="lm")
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Site) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_grid(Site ~ ReefDev) +
geom_smooth(method="lm")
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Site) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_grid(Site ~ ReefDev) +
geom_smooth(method="lm")
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Site) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_grid(~ReefDev) +
geom_smooth(method="lm")
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method="lm")
#with facetwrap by site
ggplot(data=heron_t2, aes(y = SurvDev, x = median_speed)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Site) +
geom_smooth(method="lm")
# Create the sequences
median_speed_seq <- seq(from = 0, to = 0.22, by = 0.01)
# Create a data frame with the sequences
heron1 <- data.frame(median_speed = median_speed_seq)
Pred_interaction <- predict(heron_glmer4, newdata=davies1, type = "response")
# Create the sequences
median_speed_seq <- seq(from = 0, to = 0.22, by = 0.01)
# Create a data frame with the sequences
heron1 <- data.frame(median_speed = median_speed_seq)
Pred_interaction <- predict(heron_glmer4, newdata=heron1, type = "response")
# Create the sequences
median_speed_seq <- seq(from = 0, to = 0.22, by = 0.01)
# Create a data frame with the sequences
heron1 <- expand.grid(median_speed = median_speed_seq,
Site = unique(heron_t2$Site),
ReefDev = unique(heron_t2$ReefDev))
#predict using the model
Pred_glmer4 <- predict(heron_glmer4, newdata=heron1, type = "response")
heron1$Site <- factor(heron1$Site, levels = levels(heron_t2$Site))
#predict using the model
Pred_glmer4 <- predict(heron_glmer4, newdata=heron1, type = "response")
View(heron1)
heron1 <- heron1[heron1$Site %in% levels(heron_t2$Site), ]
heron1 <- heron1[heron1$Site %in% levels(heron_t2$Site), ]
#predict using the model
Pred_glmer4 <- predict(heron_glmer4, newdata=heron1, type = "response")
#to find our priors, we need to take 2.5*sd(REPSONSE)/sd(PREDICTOR))
2.5 * sd(heron_t2$SurvDev, na.rm = TRUE)/sd(heron_t2$median_speed, na.rm = TRUE)
priors <- prior(student_t(3, 0, 2.5), class="Intercept") +
prior(normal(0,30), class = "b")
heron.form <- bf(SurvDev ~ (1|Site) + (1|ReefDev), family = bernoulli(link='logit'))
heron.brm1 <- brm(heron.form,
data=heron_clean,
prior = priors,
sample_prior = "yes",
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
heron.form <- bf(SurvDev ~ (1|Site) + (1|ReefDev), family = bernoulli(link='logit'))
priors <- prior(normal(0,2), class= "b")
heron.brm1 <- brm(heron.form,
data=heron_t2,
prior = priors,
sample_prior = "yes",
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
get_prior?
?
c
?get_prior()
get_prior(heron.form, data = heron_t2, family = bernoulli(link='logit'))
priors <- prior(student_t(3,0,2.5), class= "Intercept")
heron.brm1 <- brm(heron.form,
data=heron_t2,
prior = priors,
sample_prior = "yes",
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
# To save the model use >>
#save(heron.brm1, file = "scripts/models/survival_heron.speed.brm.RData")
# To load the model back in workspace >>
#MAY NEED TO RUN THIS IN CONSOLE TO WROK
#load(file = "scripts/models/survival_heron.speed.brm.RData")
heron.brm1 |> ggemmeans(~(1|Site) + (1|ReefDev)) |> plot(add.data = TRUE)
library(ggeffects)
# Compute marginal effects
marginal_effects <- ggpredict(heron.brm1, terms = c("Site", "ReefDev"))
# Plot the marginal effects
plot(marginal_effects)
heron.brm1 <- brm(heron.form,
data=heron_t2,
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
# To save the model use >>
#save(heron.brm1, file = "scripts/models/survival_heron.speed.brm.RData")
# To load the model back in workspace >>
#MAY NEED TO RUN THIS IN CONSOLE TO WROK
#load(file = "scripts/models/survival_heron.speed.brm.RData")
mean(heron_t2$SurvDev)
sd(heron_t2$SurvDev)
library(readr)
mckeon <- read_csv("C:/Users/sjurriaa/OneDrive - Australian Institute of Marine Science/AIMS/Git/SUYRs_public/data/mckeon.csv")
View(mckeon)
#| label: setup
#| include: false
knitr::opts_chunk$set(cache = TRUE, cache.lazy = FALSE, tidy='styler')
#| label: examinData
glimpse(mckeon)
## Explore the first 6 rows of the data
head(mckeon)
## Explore the first 6 rows of the data
head(mckeon)
## Explore the first 6 rows of the data
head(mckeon)
## Explore the first 6 rows of the data
head(mckeon)
## Explore the first 6 rows of the data
head(mckeon)
## Explore the first 6 rows of the data
head(mckeon)
str(mckeon)
str(mckeon)
heron_t2 <- heron_t2 |> mutate(Site = factor(Site),
ReefDev = factor(ReefDev))
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
library(tidyverse)  #for data wrangling etc
library(rstanarm)   #for fitting models in STAN
#library(cmdstanr)   #for cmdstan --> does not work on AIMS computers
library(brms)       #for fitting models in STAN
library(standist)   #for exploring distributions
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(DHARMa)     #for residual diagnostics
library(rstan)      #for interfacing with STAN
library(emmeans)    #for marginal means etc
library(broom)      #for tidying outputs
library(tidybayes)  #for more tidying outputs
library(HDInterval) #for HPD intervals
library(ggeffects)  #for partial plots
library(broom.mixed)#for summarising models
library(posterior)  #for posterior draws
library(ggeffects)  #for partial effects plots
library(patchwork)  #for multi-panel figures
library(bayestestR) #for ROPE
library(see)        #for some plots
library(readxl)     #to load excel documents
library(easystats)     #framework for stats, modelling and visualisation
#library(INLA)       #for approximate Bayes
library(openxlsx)    # to write excel documents
#library(INLAutils)  #for additional INLA outputs
theme_set(theme_grey()) #put the default ggplot theme back
source('helperFunctions.R')
heron_t2 <- heron_t2 |> mutate(Site = factor(Site),
ReefDev = factor(ReefDev))
#| label: setup
#| include: false
knitr::opts_chunk$set(cache = TRUE, cache.lazy = FALSE, tidy='styler')
ggplot(mckeon, aes(y=PREDATION, x=SYMBIONT)) +
geom_point(position=position_jitter(width=0.2, height=0))+
facet_wrap(~BLOCK)
mckeon <- mckeon %>%
mutate(BLOCK = factor(BLOCK),
SYMBIONT = factor(SYMBIONT, levels = c('none', 'crabs', 'shrimp', 'both')))
ggplot(mckeon, aes(y=PREDATION, x=SYMBIONT)) +
geom_point(position=position_jitter(width=0.2, height=0))+
facet_wrap(~BLOCK)
mckeon.glmer1 = glmer(PREDATION ~ SYMBIONT+(1|BLOCK),
data=mckeon,
family=binomial(link='logit'))
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(broom.mixed)
library(ggfortify) #for model diagnostics
library(sjPlot)    #for outputs
library(knitr)     #for kable
library(effects)   #for partial effects plots
library(ggeffects) #for effects plots in ggplot
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(MuMIn)     #for AICc
library(tidyverse) #for data wrangling
library(DHARMa)   #for residuals and diagnostics
library(nlme)     #for lme
library(lme4)      #for glmer
library(glmmTMB)    #for glmmTMB
library(performance) #for diagnostic plots
library(see)         #for diagnostic plots
mckeon.glmer1 = glmer(PREDATION ~ SYMBIONT+(1|BLOCK),
data=mckeon,
family=binomial(link='logit'))
mckeon.glmer2 <- update(mckeon.glmer1,  ~ . - (1|BLOCK) + (SYMBIONT|BLOCK))
mckeon.allFit <- mckeon.glmer2 %>% allFit()
## Check which of the models are considered valid (OK)
is.OK <- sapply(mckeon.allFit, is, "merMod")
is.OK
#strict_tol <- glmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
pars <- getME(mckeon.glmer2, c("theta","fixef"))
mckeon.glmer3 <- update(mckeon.glmer2, start=pars, control=glmerControl(optimizer='bobyqa',
optCtrl=list(maxfun=2e5)))
mckeon.glmmTMB1 <- glmmTMB(PREDATION ~ SYMBIONT+(1|BLOCK),
data = mckeon,
family = binomial(link = 'logit'),
REML=TRUE)
mckeon.glmmTMB2 <- mckeon.glmmTMB1 %>% update(~ . - (1|BLOCK) + (SYMBIONT|BLOCK))
mckeon.glmmTMB2 <- mckeon.glmmTMB1 %>% update(~ . - (1|BLOCK) + (SYMBIONT|BLOCK),
control=glmmTMBControl(optimizer=optim,
optArgs = list(method='SANN')))
AICc(mckeon.glmmTMB1,  mckeon.glmmTMB2)
mckeon.glmer1 %>% plot_model(type='diag') %>% plot_grid()
heron.glmer1 %>% plot_model(type='diag') %>% plot_grid()
heron_t2$Site <- as.factor(heron_t2$Site)
heron_t2$ReefDev<- as.factor(heron_t2$ReefDev)
heron_glmer1<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit")) #allowing for random intercepts but not random slopes --> accounting for potential variability in survival beteeen different sites and devices, but assuming that the effect of device on  survival is constant across different sites.
heron_glmer2<- glmer(SurvDev ~ Ub_avrg + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer3<- glmer(SurvDev ~ WaveEnergyLevel + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer4<- glmer(SurvDev ~ median_speed + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer5<- glmer(SurvDev ~ sedturf_t2 + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
summary(heron_glmer1)
summary(heron_glmer2)
summary(heron_glmer3)
summary(heron_glmer4)
summary(heron_glmer5)
AIC(heronSpp_glmer1, heron_glmer1, heron_glmer2, heron_glmer3, heron_glmer4, heron_glmer5)
heron.glmer1 %>% plot_model(type='diag') %>% plot_grid()
heron_glmer1 %>% plot_model(type='diag') %>% plot_grid()
heron_t2$Site <- as.factor(heron_t2$Site)
heron_t2$ReefDev<- as.factor(heron_t2$ReefDev)
heron_glmer1<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit")) #allowing for random intercepts but not random slopes --> accounting for potential variability in survival beteeen different sites and devices, but assuming that the effect of device on  survival is constant across different sites.
heron_glmer2<- glmer(SurvDev ~ Ub_avrg + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer3<- glmer(SurvDev ~ WaveEnergyLevel + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer4<- glmer(SurvDev ~ median_speed + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
heron_glmer5<- glmer(SurvDev ~ sedturf_t2 + (1|Site) + (1|ReefDev), data=heron_t2, family = binomial(link = "logit"))
summary(heron_glmer1)
summary(heron_glmer2)
summary(heron_glmer3)
summary(heron_glmer4)
summary(heron_glmer5)
AIC(heronSpp_glmer1, heron_glmer1, heron_glmer2, heron_glmer3, heron_glmer4, heron_glmer5)
heron_glmer1 %>% plot_model(type='diag') %>% plot_grid()
heron_glmer1 %>% plot_model(type='diag') %>% plot_grid()
heron_glmer1 %>% performance::check_model()
heron_glmer1 %>% performance::check_model()
heron_glmer1 %>% performance::check_model()
heron_glmer1|> ggpredict() %>% plot(add.data=TRUE, jitter=c(0.1,0))
mckeon.glmer1 %>% ggpredict() %>% plot(add.data=TRUE, jitter=c(0.1,0))
heron_glmer1|> ggpredict() %>% plot(add.data=TRUE, jitter=c(0.1,0))
mckeon.glmer1 %>% allEffects() %>% plot()
heron_glmer1|> allEffects() %>% plot()
mckeon.glmer1 %>% ggemmeans(~SYMBIONT) %>% plot(add.data=TRUE, jitter=c(0.1,0))
#| label: setup
#| include: false
knitr::opts_chunk$set(cache.lazy = FALSE,
tidy = "styler")
options(tinytex.engine = "xelatex")
#mckeon <- read_csv("../data/mckeon.csv", trim_ws = TRUE)
library(readr)
mckeon <- read_csv("C:/Users/sjurriaa/OneDrive - Australian Institute of Marine Science/AIMS/Git/SUYRs_public/data/mckeon.csv")
View(mckeon)
mckeon <- mckeon |> mutate(BLOCK = factor(BLOCK), SYMBIONT = factor(SYMBIONT, levels=c('none', 'crabs', 'shrimp', 'both')))
mckeon <- mckeon |> mutate(BLOCK = factor(BLOCK), SYMBIONT = factor(SYMBIONT, levels=c('none', 'crabs', 'shrimp', 'both')))
mckeon |> datawizard::data_codebook()
priors <- prior(normal(0, 1.7), class = "Intercept") +
prior(normal(0, 1.7), class = 'b') +
prior(student_t(3, 0, 1.5), class = 'sd')
heron.brm1 <- brm(heron.form,
data=heron_t2,
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
heron.brm1 <- brm(heron.form,
data=heron_t2,
priors = priors,
ample_prior = 'only',
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
heron.brm1 <- brm(heron.form,
data=heron_t2,
priors = priors,
sample_prior = 'yes',
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
priors <- prior(normal(0, 1.7), class = "Intercept") +
prior(student_t(3, 0, 1.5), class = 'sd')
heron.brm1 <- brm(heron.form,
data=heron_t2,
priors = priors,
sample_prior = 'yes',
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
get_priors(heron.form)
heron_form <- bf(SurvDev ~ (1|Site) + (1|ReefDev), family = bernoulli(link='logit'))
priors <- prior(normal(0, 1.7), class = "Intercept") +
prior(student_t(3, 0, 1.5), class = 'sd')
heron_brm1 <- brm(heron_form,
data=heron_t2,
prior = priors,
sample_prior = 'yes',
iter = 5000,
warmup = 1000,
chains = 3, cores = 3,
thin = 5,
refresh = 0,
backend = "rstan")
# To save the model use >>
#save(heron.brm1, file = "scripts/models/survival_heron.speed.brm.RData")
# To load the model back in workspace >>
#MAY NEED TO RUN THIS IN CONSOLE TO WROK
#load(file = "scripts/models/survival_heron.speed.brm.RData")
heron_brm1 |>
conditional_effects() |> plot(points = TRUE)
heron_brm1$fit |> stan_trace()
heron_brm1$fit |> stan_ac()
heron_brm1$fit |> stan_rhat()
heron_brm1$fit |> stan_ess()
heron_brm1 |> pp_check(type = 'dens_overlay', ndraws = 100)
heron_brm1 |> pp_check (type = "error_scatter_avg")
heron_brm1 |> mcmc_plot(type='violin')
library(DHARMa)
heron.resids <- make_brms_dharma_res(heron_brm1, integerResponse = FALSE)
testUniformity(heron.resids)
wrap_elements(~testUniformity(heron.resids))
wrap_elements(~plotResiduals(heron.resids, form = factor(rep(1,nrow(heron_t2)))))
wrap_elements(~plotResiduals(heron.resids, quantreg = TRUE))   # leave the quartile calculations off if you have a small amount of data
wrap_elements(~testDispersion(heron.resids))
heron_form <- bf(SurvDev ~ (1|Site) + (1|ReefDev), family = bernoulli(link='logit'))
heron_form_speed <- bf(SurvDev ~ median_speed + (1|Site) + (1|ReefDev), family = bernoulli(link='logit'))
