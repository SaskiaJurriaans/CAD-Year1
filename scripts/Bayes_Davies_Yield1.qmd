---
title: "Bayes_davies_Yield"
edits: "Edits made in scripts following meeting with Murray 17/04/2024"
author: "Sas"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/sjurriaa/Australian Institute of Marine Science/Carly Randall - Randall Lab/CAD/CAD Year1")
```

# Preparations

Load the necessary libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse)  #for data wrangling etc
library(rstanarm)   #for fitting models in STAN
#library(cmdstanr)   #for cmdstan --> does not work on AIMS computers
library(brms)       #for fitting models in STAN
library(standist)   #for exploring distributions
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(DHARMa)     #for residual diagnostics
library(rstan)      #for interfacing with STAN
library(emmeans)    #for marginal means etc
library(broom)      #for tidying outputs
library(tidybayes)  #for more tidying outputs
library(HDInterval) #for HPD intervals
library(ggeffects)  #for partial plots
library(broom.mixed)#for summarising models
library(posterior)  #for posterior draws
library(ggeffects)  #for partial effects plots
library(patchwork)  #for multi-panel figures
library(bayestestR) #for ROPE
library(see)        #for some plots
library(readxl)     #to load excel documents
library(easystats)     #framework for stats, modelling and visualisation
#library(INLA)       #for approximate Bayes
library(openxlsx)    # to write excel documents
#library(INLAutils)  #for additional INLA outputs
theme_set(theme_grey()) #put the default ggplot theme back
source('helperFunctions.R')
```

# Read in the data

```{r}
survival <- read_excel("data/YEAR1_Survival.xlsx", na ="")

environment <- read_excel ("data/YEAR1 Benthic Environment ReefDev.xlsx", na="")
```

# Exploratory data

```{r}
glimpse(survival)
head(survival)
str(survival)
survival |> datawizard::data_codebook()
```

Remove some unnecessary columns

```{r}
survival <- survival |>
  select(-c(ID, Observer, CensusT, DeploymentDate, CensusDate, Device_ID))
```

# davies Yield

### Subset data: davies yield (device level)

```{r}
davies_surv_t6 <- survival |> filter (Reef == "Davies",
                             Census == "t6",
                             Tab_ID == 1) |>
  select(-c(Tab_ID, SurvTab, LinLength_mm, Height_mm, PerpLenght_mm))

davies_surv <- survival |> filter (Reef == "Davies",
                             Tab_ID == 1) |>
  select(-c(Tab_ID, SurvTab, LinLength_mm, Height_mm, PerpLenght_mm))

davies_env <- environment |> 
  filter (Reef == "Davies") |>
  select(-c(Reef1, Device_ID))
```

### Merge survival and environment

```{r}
#create one dataset for final timepoint
davies_t5 <- merge(davies_env, davies_surv_t6, by = c("Reef", "Site", "ReefDev"), all = TRUE)

#create one dataset with all timepoints
davies <- merge(davies_env, davies_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)

#free up space
remove(davies_surv, davies_env)

# Remove rows with missing values
davies_t5$SurvDev <- as.numeric(davies_t5$SurvDev)
davies_t5 <- davies_t5[complete.cases(davies_t5$SurvDev),  ]
davies_t5 <- davies_t5[complete.cases(davies_t5$PC1),  ]
davies_t5 <- davies_t5 |> select(-c(sedturf_t2, sedconcrete_t2))

# Remove rows with missing values
davies$SurvDev <- as.numeric(davies$SurvDev)
davies <- davies[complete.cases(davies$SurvDev),  ]
davies <- davies[complete.cases(davies$PC1),  ]
davies <- davies |> select(-c(sedturf_t2, sedconcrete_t2))
```

### GLM

```{r}
library(lme4)
davies_t5$Site <- as.factor(davies_t5$Site)
davies_t5$ReefDev<- as.factor(davies_t5$ReefDev)

davies_glmer1a<- glmer(SurvDev ~ (1|Site) + (1|ReefDev), data=davies_t5, family = binomial(link = "logit")) #allowing for random intercepts but not random slopes --> accounting for potential variability in survival beteeen different sites and devices, but assuming that the effect of device on  survival is constant across different sites.
davies_glmer1b<- glmer(SurvDev ~ (1|Site) , data=davies_t5, family = binomial(link = "logit"))

davies_glmer2<- glmer(SurvDev ~ Ub_avrg + (1|Site) + (1|ReefDev), data=davies_t5, family = binomial(link = "logit")) 
davies_glmer3<- glmer(SurvDev ~ WaveEnergyLevel + (1|Site) + (1|ReefDev), data=davies_t5, family = binomial(link = "logit")) 
davies_glmer4<- glmer(SurvDev ~ median_speed + (1|Site) + (1|ReefDev), data=davies_t5, family = binomial(link = "logit")) 
davies_glmer5<- glmer(SurvDev ~ sedturf_t5 + (1|Site) + (1|ReefDev), data=davies_t5, family = binomial(link = "logit")) 

summary(davies_glmer1a)
summary(davies_glmer1b)
summary(davies_glmer2)
summary(davies_glmer3)
summary(davies_glmer4)
summary(davies_glmer5)

AIC(davies_glmer1a, davies_glmer1b, davies_glmer2, davies_glmer3, davies_glmer4, davies_glmer5)
```

OUTPUT: all models behave very similar

### Visualize data

### **median_speed**

```{r}
ggplot(data=davies_t5, aes(y = SurvDev, x = median_speed)) + 
  geom_point(position = position_jitter(width = 0.01, height = 0)) +
  geom_smooth(method="lm")

ggplot(data=davies_t5, aes(y = SurvDev, x = median_speed)) + 
  geom_point(position = position_jitter(width = 0.01, height = 0)) +
  geom_smooth(method="lm", formula = y~poly(x,3), se = FALSE)

#with facetwrap by site
ggplot(data=davies_t5, aes(y = SurvDev, x = median_speed)) + 
  geom_point(position = position_jitter(width = 0.01, height = 0)) +
  facet_wrap(~Site) +
  geom_smooth(method="lm")
```

Wave Energy Level

```{r}
ggplot(data=davies_t5, aes(y = SurvDev, x = WaveEnergyLevel)) + 
  geom_point(position = position_jitter(width = 0.2, height = 0)) +
  geom_smooth(method="lm")

ggplot(data=davies_t5, aes(y = SurvDev, x = WaveEnergyLevel)) + 
  geom_point(position = position_jitter(width = 0.2, height = 0)) +
  geom_smooth(method="lm", formula = y~poly(x,3), se = FALSE)

#with facetwrap by site
ggplot(data=davies_t5, aes(y = SurvDev, x = WaveEnergyLevel)) + 
  geom_point(position = position_jitter(width = 0.2, height = 0)) +
  facet_wrap(~Site) +
  geom_smooth(method="lm")
```

```{r}
Davies_current <- ggplot(davies_t5, aes(x = median_speed, y = SurvDev)) +
  geom_point(position = position_jitter(width = 0.2, height = 0)) +
  geom_smooth(method="lm") +
  labs(title = "Davies Reef",
       x = "In-situ current - median speed (m/s)",
       y = "% Survival (yield)") +
  theme_bw() +
  ylim(0,1) +
  theme(panel.border = element_rect(color = "black", fill = NA),
        axis.line = element_line(color = "black"),
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14)) 

Davies_current

ggsave("Davies - Survival final census Current - yield.png", plot=Davies_current, width = 4, height = 6, dpi = 600)
```

# Brm with Census 

We need to make sure that the categorical variables and the random effects are defined as factors:

```{r}
davies_t5 <- davies_t5 |> mutate(Site = factor(Site),
                               ReefDev = factor(ReefDev))

davies <- davies |> mutate(Site = factor(Site),
                               ReefDev = factor(ReefDev))
```

### Formulas

Logistic mixed-effects regression model with random intercepts for Site and Device:

```{r}
davies_form <- bf(SurvDev ~ (1|Site), family = bernoulli(link='logit'))

davies_form_speed <- bf(SurvDev ~ median_speed +    (1|Site), family = bernoulli(link='logit'))
davies_form_Ub <-    bf(SurvDev ~ Ub_avrg +         (1|Site), family = bernoulli(link='logit'))
davies_form_turf <-   bf(SurvDev ~ sedturf_t5 +     (1|Site), family = bernoulli(link='logit'))
davies_form_concrete <-bf(SurvDev ~ sedconcrete_t5 +(1|Site), family = bernoulli(link='logit'))
davies_form_Wave <-  bf(SurvDev ~ WaveEnergyLevel + (1|Site), family = bernoulli(link='logit'))
davies_form_PCA <-   bf(SurvDev ~ PC1 + PC2+            (1|Site), family = bernoulli(link='logit'))
```

Now with polynomial terms:

```{r}
davies_form_speed_poly <- bf(SurvDev ~ poly(median_speed,3) +    (1|Site) , family = bernoulli(link='logit'))
davies_form_Ub_poly <-    bf(SurvDev ~ poly(Ub_avrg,3) +         (1|Site) , family = bernoulli(link='logit'))
davies_form_turf_poly <-   bf(SurvDev ~ poly(sedturf_t5,3) +      (1|Site) , family = bernoulli(link='logit'))
davies_form_Wave_poly <-  bf(SurvDev ~ poly(WaveEnergyLevel,3) + (1|Site) , family = bernoulli(link='logit'))
davies_form_PCA_poly <-   bf(SurvDev ~ poly(PC1,3) +  poly(PC2,3) +           (1|Site) , family = bernoulli(link='logit'))
```

### Priors

class "Intercept" -\> for random effects

class "b" -\> for regression coefficent

class "sd" -\> for standard deviations of random effects

```{r}
priors <- prior(normal(0, 1.7), class = "Intercept") +
   prior(student_t(3, 0, 1.5), class = 'sd')
```

**median speed**

```{r}
2.5 * sd(davies_t5$SurvDev, na.rm = TRUE)/sd(davies_t5$median_speed, na.rm = TRUE)

priors_speed <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,40), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')
```

**Ub**

```{r}
2.5 * sd(davies_t5$SurvDev, na.rm = TRUE)/sd(davies_t5$Ub_avrg, na.rm = TRUE)

priors_Ub <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,6), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')
```

**turf**

```{r}
2.5 * sd(davies_t5$SurvDev, na.rm = TRUE)/sd(davies_t5$sedturf_t5, na.rm = TRUE)

priors_turf <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')
```

**concrete**

```{r}
2.5 * sd(davies_t5$SurvDev, na.rm = TRUE)/sd(davies_t5$sedconcrete_t5, na.rm = TRUE)

priors_concrete <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,2), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')
```

**WaveEnergyLevel**

```{r}
2.5 * sd(davies_t5$SurvDev, na.rm = TRUE)/sd(davies_t5$WaveEnergyLevel, na.rm = TRUE)

priors_wave <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,1), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

```

**PCA**

```{r}
2.5 * sd(davies_t5$SurvDev, na.rm = TRUE)/sd(davies_t5$PC1, na.rm = TRUE)

priors_PCA <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,8), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')
```

##### brm1- Random effects + time

```{r}
davies_form_time <- bf(SurvDev ~ Census + (1|Site), family = bernoulli(link='logit'))

priors_time <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm1_time <- brm(davies_form_time,
                 data=davies,
                 prior = priors_time,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                backend = "rstan")

# To save the model use >> 
#save(davies_brm1_time, file = "scripts/models/davies_brm_time.RData")

```

##### brm2- time \* Wave

```{r}
davies_form_time_wave <-  bf(SurvDev ~ Census + WaveEnergyLevel + (1|Site), family = bernoulli(link='logit'))

priors_time <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm2_time_wave <- brm(davies_form_time_wave,
                 data=davies,
                 prior = priors_time,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                backend = "rstan")

# To save the model use >> 
#save(davies_brm2_time_wave, file = "scripts/models/davies_brm2_time_wave.RData")
```

##### brm3- time \* Ub

```{r}
davies_form_Ub_time <-    bf(SurvDev ~ Census + Ub_avrg +         (1|Site), family = bernoulli(link='logit'))

priors_time <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm3_time_Ub <- brm(davies_form_Ub_time,
                 data=davies,
                 prior = priors_time,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm3_time_Ub, file = "scripts/models/davies_brm3_time_Ub.RData")
```

##### brm4- time \* Current

```{r}
davies_form_current_time <-    bf(SurvDev ~ Census + median_speed  +         (1|Site), family = bernoulli(link='logit'))

priors_time <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm4_time_current <- brm(davies_form_current_time,
                 data=davies,
                 prior = priors_time,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm4_time_current, file = "scripts/models/davies_brm4_time_current.RData")
```

##### brm5- time \* Turf

```{r}

davies_form_turf_time <-    bf(SurvDev ~ Census + sedturf_t5  + (1|Site), family = bernoulli(link='logit'))

priors_time <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm5_time_turf <- brm(davies_form_turf_time,
                 data=davies,
                 prior = priors_time,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm5_time_turf, file = "scripts/models/davies_brm5_time_turf.RData")
```

##### brm6- time \* Concrete

```{r}
davies_form_concrete_time <-    bf(SurvDev ~ Census + sedconcrete_t5  +         (1|Site), family = bernoulli(link='logit'))

priors_time <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm6_time_concrete <- brm(davies_form_concrete_time,
                 data=davies,
                 prior = priors_time,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm6_time_concrete, file = "scripts/models/davies_brm6_time_concrete.RData")
```

##### brm7- time \* habitat

```{r}
davies_form_PCA_time <-    bf(SurvDev ~ Census + PC1  + PC2+         (1|Site), family = bernoulli(link='logit'))

priors_time <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm7_time_PCA <- brm(davies_form_PCA_time,
                 data=davies,
                 prior = priors_time,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm7_time_PCA, file = "scripts/models/davies_brm7_time_PCA.RData")
```

### Load models

```{r}
load(file = "scripts/models/davies_brm_time.RData")
load(file = "scripts/models/davies_brm2_time_wave.RData")
load(file = "scripts/models/davies_brm3_time_Ub.RData")
load(file = "scripts/models/davies_brm4_time_current.RData")
load(file = "scripts/models/davies_brm5_time_turf.RData")
load(file = "scripts/models/davies_brm6_time_concrete.RData")
load(file = "scripts/models/davies_brm7_time_PCA.RData")
```

### loo

```{r}
l_brm <- davies_brm1_time |> loo()
l_wave <- davies_brm2_time_wave|> loo()
l_Ub <- davies_brm3_time_Ub |> loo()
l_current <- davies_brm4_time_current |> loo()
l_turf <- davies_brm5_time_turf|> loo()
l_concrete <- davies_brm6_time_concrete|> loo()
l_PC1 <- davies_brm7_time_PCA|> loo()

looic(davies_brm1_time)           #  LOOIC: 1467.88  [32.60]
looic(davies_brm2_time_wave)     #  LOOIC: 1468.11  [32.66]
looic(davies_brm3_time_Ub)      #  LOOIC: 1467.99  [32.65]
looic(davies_brm4_time_current)  #  LOOIC: 1468.32  [32.62]
looic(davies_brm5_time_turf)      #  LOOIC: 1467.75  [32.73]
looic(davies_brm6_time_concrete)       #  LOOIC: 1468.30  [32.70]
looic(davies_brm7_time_PCA)       #  LOOIC: 1464.33  [32.93]

loo_compare(l_brm, l_current, l_Ub, l_wave, l_turf, l_concrete, l_PC1)
```

NOTES ON THIS: Prefer the model with the lower LOOIC, as it suggests better expected out-of-sample predictive performance. However, consider the uncertainty (SE) around these estimates. Significance of Differences: Look at the differences in LOOIC and their standard errors. A rule of thumb is that a difference greater than twice its standard error might be considered substantial, but this is not a strict threshold. If two models have similar LOOIC values, the simpler model (the one with fewer parameters) is typically preferred due to the principle of parsimony. This is not directly shown in the loo_compare() output but is an important consideration when interpreting results.

# Brm Final Timepoint

##### brm8- Random effects FINAL TIMEPOINT

```{r}
davies_form_t6 <- bf(SurvDev ~ (1|Site), family = bernoulli(link='logit'))

priors <- prior(normal(0, 1.7), class = "Intercept") +
    prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm8_t6 <- brm(davies_form_t6,
                 data=davies_t5,
                 prior = priors,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                backend = "rstan")

# To save the model use >> 
#save(davies_brm8_t6, file = "scripts/models/davies_brm8_t6.RData")
```

Model diagnostics

```{r}
davies_brm8_t6 |> pp_check(type = 'dens_overlay', ndraws = 100)
davies_brm8_t6  |> pp_check(group = 'Site', type = 'violin_grouped') 

davies.resids8 <- make_brms_dharma_res(davies_brm8_t6, integerResponse = FALSE)
testUniformity(davies.resids8) 
plotResiduals(davies.resids8) 
testDispersion(davies.resids8)
```

##### brm9- t6- Wave

```{r}
davies_form_t6_wave <-  bf(SurvDev ~ WaveEnergyLevel + (1|Site), family = bernoulli(link='logit'))

priors_wave <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,1), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')


davies_brm9_t6_wave <- brm(davies_form_t6_wave,
                 data=davies_t5,
                 prior = priors_wave,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                backend = "rstan")

# To save the model use >> 
#save(davies_brm9_t6_wave, file = "scripts/models/davies_brm9_t6_wave.RData")
```

Model diagnostics

```{r}
davies_brm9_t6_wave |> pp_check(type = 'dens_overlay', ndraws = 100)
davies_brm9_t6_wave  |> pp_check(group = 'Site', type = 'violin_grouped') 

davies.resids9 <- make_brms_dharma_res(davies_brm9_t6_wave, integerResponse = FALSE)
testUniformity(davies.resids9) 
plotResiduals(davies.resids9) 
testDispersion(davies.resids9)
```

##### brm10- t6- Ub

```{r}
davies_form_t6_Ub <-    bf(SurvDev ~  Ub_avrg +         (1|Site), family = bernoulli(link='logit'))

priors_Ub <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,6), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm10_t6_Ub <- brm(davies_form_t6_Ub,
                 data=davies_t5,
                 prior = priors_Ub,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm10_t6_Ub, file = "scripts/models/davies_brm10_t6_Ub.RData")
```

Model diagnostics

```{r}
davies_brm10_t6_Ub |> pp_check(type = 'dens_overlay', ndraws = 100)
davies_brm10_t6_Ub  |> pp_check(group = 'Site', type = 'violin_grouped') 

davies.resids10 <- make_brms_dharma_res(davies_brm10_t6_Ub, integerResponse = FALSE)
testUniformity(davies.resids10) 
plotResiduals(davies.resids10) 
testDispersion(davies.resids10)
```

##### brm11- t6- current

```{r}
davies_form_t6_current <-    bf(SurvDev ~  median_speed +         (1|Site), family = bernoulli(link='logit'))

priors_speed <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,40), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm11_t6_current <- brm(davies_form_t6_current,
                 data=davies_t5,
                 prior = priors_speed,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm11_t6_current, file = "scripts/models/davies_brm11_t6_current.RData")
```

Model diagnostics

```{r}
davies_brm11_t6_current |> pp_check(type = 'dens_overlay', ndraws = 100)
davies_brm11_t6_current  |> pp_check(group = 'Site', type = 'violin_grouped') 

davies.resids11 <- make_brms_dharma_res(davies_brm11_t6_current, integerResponse = FALSE)
testUniformity(davies.resids11) 
plotResiduals(davies.resids11) 
testDispersion(davies.resids11)
```

##### brm12 - t6- turf

```{r}
davies_form_t6_turf <-    bf(SurvDev ~  sedturf_t5 +         (1|Site), family = bernoulli(link='logit'))

priors_turf <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm12_t6_turf <- brm(davies_form_t6_turf,
                 data=davies_t5,
                 prior = priors_turf,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm12_t6_turf, file = "scripts/models/davies_brm12_t6_turf.RData")
```

Model diagnostics

```{r}
davies_brm12_t6_turf |> pp_check(type = 'dens_overlay', ndraws = 100)
davies_brm12_t6_turf  |> pp_check(group = 'Site', type = 'violin_grouped') 

davies.resids11 <- make_brms_dharma_res(davies_brm12_t6_turf, integerResponse = FALSE)
testUniformity(davies.resids12) 
plotResiduals(davies.resids12) 
testDispersion(davies.resids12)
```

##### brm13 - t6- concrete

```{r}
davies_form_t6_concrete <-    bf(SurvDev ~  sedconcrete_t5 +         (1|Site), family = bernoulli(link='logit'))

priors_concrete <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm13_t6_concrete  <- brm(davies_form_t6_concrete,
                 data=davies_t5,
                 prior = priors_concrete,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm13_t6_concrete, file = "scripts/models/davies_brm13_t6_concrete.RData")
```

Model diagnostics

```{r}
davies_brm13_t6_concrete |> pp_check(type = 'dens_overlay', ndraws = 100)
davies_brm13_t6_concrete  |> pp_check(group = 'Site', type = 'violin_grouped') 

davies.resids11 <- make_brms_dharma_res(davies_brm13_t6_concrete, integerResponse = FALSE)
testUniformity(davies.resids13) 
plotResiduals(davies.resids13) 
testDispersion(davies.resids13)
```

##### brm14- t6 - habitat

```{r}
davies_form_t6_PCA <-    bf(SurvDev ~  PC1 + PC2 + (1|Site), family = bernoulli(link='logit'))

priors_PCA <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,8), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

davies_brm14_t6_PCA  <- brm(davies_form_t6_PCA,
                 data=davies_t5,
                 prior = priors_PCA,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(davies_brm14_t6_PCA, file = "scripts/models/davies_brm14_t6_PCA.RData")
```

Model diagnostics

```{r}
davies_brm14_t6_PCA |> pp_check(type = 'dens_overlay', ndraws = 100)
davies_brm14_t6_PCA  |> pp_check(group = 'Site', type = 'violin_grouped') 

davies.resids11 <- make_brms_dharma_res(davies_brm14_t6_PCA, integerResponse = FALSE)
testUniformity(davies.resids14) 
plotResiduals(davies.resids14) 
testDispersion(davies.resids14)
```

### Load models

```{r}
load(file = "scripts/models/davies_brm8_t6.RData")
load(file = "scripts/models/davies_brm9_t6_wave.RData")
load(file = "scripts/models/davies_brm10_t6_Ub.RData")
load(file = "scripts/models/davies_brm11_t6_current.RData")
load(file = "scripts/models/davies_brm12_t6_turf.RData")
load(file = "scripts/models/davies_brm13_t6_concrete.RData")
load(file = "scripts/models/davies_brm14_t6_PCA.RData")
```

### Compare loo

```{r}
l_brm_t6 <- davies_brm8_t6 |> loo()
l_wave_t6 <- davies_brm9_t6_wave|> loo()
l_Ub_t6 <- davies_brm10_t6_Ub |> loo()
l_current_t6 <- davies_brm11_t6_current |> loo()
l_turf_t6 <- davies_brm12_t6_turf|> loo()
l_concrete_t6 <- davies_brm13_t6_concrete|> loo()
l_PCA_t6 <- davies_brm14_t6_PCA|> loo()

looic(davies_brm8_t6)           #  LOOIC: 261.20   [15.93]
looic(davies_brm9_t6_wave)     #  LOOIC: 262.38   [16.18]
looic(davies_brm10_t6_Ub)      #  LOOIC: 261.86   [15.96]
looic(davies_brm11_t6_current)  #  LOOIC: 262.17   [16.19]
looic(davies_brm12_t6_turf)      #  LOOIC: 262.56   [16.11]
looic(davies_brm13_t6_concrete)       #  LOOIC: 262.60   [16.21]
looic(davies_brm14_t6_PCA)       #  LOOIC: 265.15   [16.39]

loo_compare(l_brm_t6, l_wave_t6, l_Ub_t6, l_current_t6, l_turf_t6, l_concrete_t6, l_PCA_t6)
```

### Summary

```{r}
davies_brm8_t6 |> summary()
davies_brm9_t6_wave|> summary()
davies_brm10_t6_Ub|> summary()
davies_brm11_t6_current|> summary()
davies_brm12_t6_turf|> summary()
davies_brm13_t6_concrete|> summary()
davies_brm14_t6_PCA|> summary()
```

### R2

```{r}
davies_brm1_time |> r2_loo()
davies_brm2_time_wave|> r2_loo()
davies_brm3_time_Ub|> r2_loo()
davies_brm4_time_current|> r2_loo()
davies_brm5_time_turf|> r2_loo()
davies_brm6_time_concrete|> r2_loo()
davies_brm7_time_PCA|> r2_loo()

davies_brm8_t6 |> r2_loo()
davies_brm9_t6_wave|> r2_loo()
davies_brm10_t6_Ub|> r2_loo()
davies_brm11_t6_current|> r2_loo()
davies_brm12_t6_turf|> r2_loo()
davies_brm13_t6_concrete|> r2_loo()
davies_brm14_t6_PCA|> r2_loo()
```

### Ranef: site specific effects 

```{r}
#davies_form_t6 <- bf(SurvDev ~ (1|Site), family = bernoulli(link='logit'))
#davies_brm8_t6

davies_site_effects_brm8 <- ranef(davies_brm8_t6)$Site
davies_site_effects_brm8

davies_site_effects_brm11 <- ranef(davies_brm11_t6_current)$Site
davies_site_effects_brm11
```

# \-\-\-\-- Figures \-\-\-\--

### Conditional effects

```{r}
#davies_brm |> conditional_effects() |> plot(points=TRUE)
davies_brm9_t6_wave |> conditional_effects() |> plot(points=TRUE)
davies_brm10_t6_Ub |> conditional_effects() |> plot(points=TRUE)
davies_brm11_t6_current |> conditional_effects() |> plot(points=TRUE)
davies_brm12_t6_turf |> conditional_effects() |> plot(points=TRUE)
davies_brm13_t6_concrete |> conditional_effects() |> plot(points=TRUE)
davies_brm14_t6_PCA |> conditional_effects() |> plot(points=TRUE)
```

### Bayes figures

Select the environmental predictors for the plots, then create empty entries for Amil and Aten so that they appear in the figure legends (for complete species representation), and then combine the new species data with the selected davies data.

```{r}
davies_variables <- davies_t5 |>
  select(c(Spp, SurvDev, Ub_avrg, WaveEnergyLevel, sedturf_t5, sedconcrete_t5, median_speed))

davies_variables_new <- data.frame(
  Ub_avrg = NA,  # Use NA since there are no actual values
  WaveEnergyLevel = NA,
  sedturf_t5 = NA,
  sedconcrete_t5 = NA,
  median_speed = NA,
  SurvDev = NA, 
  Spp = c("A. millepora", "A. tenuis")
)

# Combine the new species data with the original davies data
davies_combined <- rbind(davies_variables, davies_variables_new)

remove(davies_variables)
remove(davies_variables_new)
```

Create a new data frame to add predictor variables and species information for *A. millepora* and *A. tenuis*, with placeholder values for environmental variables and fitted values.

```{r}
# Add a new species entry for predictor dataframe
new_species_davies <- data.frame(
  Ub_avrg = rep(NA, length(10)),
  WaveEnergyLevel = rep(NA, length(10)),
  sedturf_t5 = rep(NA, length(10)),
  sedconcrete_t5 = rep(NA, length(10)),
  median_speed = rep(NA, length(10)),
  Spp = c("A_millepora", "A_tenuis"),
  Fitted = NA,  
  Lower = NA,   
  Upper = NA    
)

davies_brm9 <- new_species_davies |>
  select(c(WaveEnergyLevel, Spp, Fitted, Lower, Upper))
davies_brm10 <- new_species_davies |>
  select(c(Ub_avrg, Spp, Fitted, Lower, Upper))
davies_brm11 <- new_species_davies |>
  select(c(median_speed, Spp, Fitted, Lower, Upper))
davies_brm12 <- new_species_davies |>
  select(c(sedturf_t5, Spp, Fitted, Lower, Upper))
davies_brm13 <- new_species_davies |>
  select(c(sedconcrete_t5, Spp, Fitted, Lower, Upper))
#davies_brm14 <- new_species_davies |>
#  select(c(sedturf_t5, Spp, Fitted, Lower, Upper))
```

##### Bottom Stress

Extract fitted values and predictors and create empty entries for Aten and Amil for complete species representation in the figure legends:

```{r}
# Extract fitted values and predictors 
fitted_values_davies_brm10 <- fitted(davies_brm10_t6_Ub, summary = FALSE)

predicted_data_davies_brm10 <- data.frame(  
  Ub_avrg = davies_t5$Ub_avrg,  
  Spp = davies_t5$Spp,  
  Fitted = apply(fitted_values_davies_brm10, 2, mean), 
  Lower = apply(fitted_values_davies_brm10, 2, function(x) quantile(x, 0.025)), 
  Upper = apply(fitted_values_davies_brm10, 2, function(x) quantile(x, 0.975)) )

# Combine the new species data with the original predicted data
predicted_data_davies_brm10 <- rbind(predicted_data_davies_brm10, davies_brm10)
```

Create plot:

```{r}
plot_davies_Ub <- ggplot() +
  geom_jitter(data = davies_combined, aes(x = Ub_avrg, y = SurvDev, color = Spp), alpha = 0.5, width = 0.05, height = 0) +
  geom_errorbar(data = predicted_data_davies_brm10, aes(x = Ub_avrg, ymin = Lower, ymax = Upper), color = "black", width = 0.025, alpha = 0.5) +
  geom_point(data = predicted_data_davies_brm10, aes(x = Ub_avrg, y = Fitted), color = "black") +
  labs(color = "Species", fill = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. tenuis" = "purple", "A. millepora" = "green")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(), # Remove x-axis title
    axis.title.y = element_blank()
  )

# Plot the graph
plot(plot_davies_Ub)
```

##### Wave Energy Level

Extract fitted values and predictors:

```{r}
# Extract fitted values and predictors 
fitted_values_davies_brm9 <- fitted(davies_brm9_t6_wave, summary = FALSE)

predicted_data_davies_brm9 <- data.frame(  
  WaveEnergyLevel = davies_t5$WaveEnergyLevel,  
  Spp = davies_t5$Spp,  
  Fitted = apply(fitted_values_davies_brm9, 2, mean), 
  Lower = apply(fitted_values_davies_brm9, 2, function(x) quantile(x, 0.025)), 
  Upper = apply(fitted_values_davies_brm9, 2, function(x) quantile(x, 0.975)) )

# Combine the new species data with the original predicted data
predicted_data_davies_brm9 <- rbind(predicted_data_davies_brm9, davies_brm9)
```

Create plot:

```{r}
plot_davies_wave <- ggplot() +
  geom_jitter(data = davies_combined, aes(x = WaveEnergyLevel, y = SurvDev, color = Spp), alpha = 0.5, width = 0.1, height = 0) +
  geom_errorbar(data = predicted_data_davies_brm9, aes(x = WaveEnergyLevel, ymin = Lower, ymax = Upper), color = "black", width = 0.1, alpha = 0.5) +
  geom_point(data = predicted_data_davies_brm9, aes(x = WaveEnergyLevel, y = Fitted), color = "black") +
  labs(color = "Species", fill = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. tenuis" = "purple", "A. millepora" = "green")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(), # Remove x-axis title
    axis.title.y = element_blank()
  )

# Plot the graph
plot(plot_davies_wave)
```

##### Flow velocity

Extract fitted values and predictors:

```{r}
# Extract fitted values and predictors 
fitted_values_davies_brm11 <- fitted(davies_brm11_t6_current, summary = FALSE)

predicted_data_davies_brm11 <- data.frame(  
  median_speed = davies_t5$median_speed,  
  Spp = davies_t5$Spp,  
  Fitted = apply(fitted_values_davies_brm11, 2, mean), 
  Lower = apply(fitted_values_davies_brm11, 2, function(x) quantile(x, 0.025)), 
  Upper = apply(fitted_values_davies_brm11, 2, function(x) quantile(x, 0.975)) )

# Combine the new species data with the original predicted data
predicted_data_davies_brm11 <- rbind(predicted_data_davies_brm11, davies_brm11)
```

Create plot:

```{r}
plot_davies_speed <- ggplot() +
  geom_jitter(data = davies_combined, aes(x = median_speed, y = SurvDev, color = Spp), alpha = 0.5, width = 0.0025, height = 0) +
  geom_errorbar(data = predicted_data_davies_brm11, aes(x = median_speed, ymin = Lower, ymax = Upper), color = "black", width = 0.0025, alpha = 0.5) +
  geom_point(data = predicted_data_davies_brm11, aes(x = median_speed, y = Fitted), color = "black") +
  labs(color = "Species", fill = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. tenuis" = "purple", "A. millepora" = "green")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(), # Remove x-axis title
    axis.title.y = element_blank()
  )

# Plot the graph
plot(plot_davies_speed)
```

##### Turf

Extract fitted values and predictors:

```{r}
# Extract fitted values and predictors 
fitted_values_davies_brm12 <- fitted(davies_brm12_t6_turf, summary = FALSE)

predicted_data_davies_brm12 <- data.frame(  
  sedturf_t5 = davies_t5$sedturf_t5,  
  Spp = davies_t5$Spp,  
  Fitted = apply(fitted_values_davies_brm12, 2, mean), 
  Lower = apply(fitted_values_davies_brm12, 2, function(x) quantile(x, 0.025)), 
  Upper = apply(fitted_values_davies_brm12, 2, function(x) quantile(x, 0.975)) )

# Combine the new species data with the original predicted data
predicted_data_davies_brm12 <- rbind(predicted_data_davies_brm12, davies_brm12)

```

Create plot:

```{r}
plot_davies_turf <- ggplot() +
  geom_jitter(data = davies_combined, aes(x = sedturf_t5, y = SurvDev, color = Spp), alpha = 0.5, width = 0.08, height = 0) +
  geom_errorbar(data = predicted_data_davies_brm12, aes(x = sedturf_t5, ymin = Lower, ymax = Upper), color = "black", width = 0.025, alpha = 0.5) +
  geom_point(data = predicted_data_davies_brm12, aes(x = sedturf_t5, y = Fitted), color = "black") +
  labs(color = "Species", fill = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. tenuis" = "purple", "A. millepora" = "green")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(), # Remove x-axis title
    axis.title.y = element_blank()
  )

# Plot the graph
plot(plot_davies_turf)
```

##### Concrete

Extract fitted values and predictors:

```{r}
# Extract fitted values and predictors 
fitted_values_davies_brm13 <- fitted(davies_brm13_t6_concrete, summary = FALSE)

predicted_data_davies_brm13 <- data.frame(  
  sedconcrete_t5 = davies_t5$sedconcrete_t5,  
  Spp = davies_t5$Spp,  
  Fitted = apply(fitted_values_davies_brm13, 2, mean), 
  Lower = apply(fitted_values_davies_brm13, 2, function(x) quantile(x, 0.025)), 
  Upper = apply(fitted_values_davies_brm13, 2, function(x) quantile(x, 0.975)) )

# Combine the new species data with the original predicted data
predicted_data_davies_brm13 <- rbind(predicted_data_davies_brm13, davies_brm13)
```

Create plot:

```{r}
plot_davies_concrete <- ggplot() +
  geom_jitter(data = davies_combined, aes(x = sedconcrete_t5, y = SurvDev, color = Spp), alpha = 0.5, width = 0.02, height = 0) +
  geom_errorbar(data = predicted_data_davies_brm13, aes(x = sedconcrete_t5, ymin = Lower, ymax = Upper), color = "black", width = 0.05, alpha = 0.5) +
  geom_point(data = predicted_data_davies_brm13, aes(x = sedconcrete_t5, y = Fitted), color = "black") +
  labs(color = "Species", fill = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. tenuis" = "purple", "A. millepora" = "green")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(), # Remove x-axis title
    axis.title.y = element_blank()
  )

# Plot the graph
plot(plot_davies_concrete)
```

### \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

### Save figures:

```{r}
ggsave("output/figures survival/Davies Survival Probability Ub.jpeg", plot_davies_Ub, width = 10, height = 6)
ggsave("output/figures survival/Davies Survival Probability WaveEnergyLevel.jpeg", plot_davies_wave, width = 10, height = 6)
ggsave("output/figures survival/Davies Survival Probability Median Speed.jpeg", plot_davies_speed, width = 10, height = 6)
ggsave("output/figures survival/Davies Survival Probability Turf.jpeg", plot_davies_turf, width = 10, height = 6)
ggsave("output/figures survival/Davies Survival Probability Concrete.jpeg", plot_davies_concrete, width = 10, height = 6)
```
