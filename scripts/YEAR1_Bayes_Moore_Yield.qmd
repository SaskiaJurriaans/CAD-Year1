---
title: "Bayes_moore_Yield"
edits: "Edits made in scripts following meeting with Murray 17/04/2024"
author: "Sas"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/sjurriaa/Australian Institute of Marine Science/Carly Randall - Randall Lab/CAD/CAD Year1")
```

# Preparations

Load the necessary libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse)  #for data wrangling etc
library(rstanarm)   #for fitting models in STAN
#library(cmdstanr)   #for cmdstan --> does not work on AIMS computers
library(brms)       #for fitting models in STAN
library(standist)   #for exploring distributions
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(DHARMa)     #for residual diagnostics
library(rstan)      #for interfacing with STAN
library(emmeans)    #for marginal means etc
library(broom)      #for tidying outputs
library(tidybayes)  #for more tidying outputs
library(HDInterval) #for HPD intervals
library(ggeffects)  #for partial plots
library(broom.mixed)#for summarising models
library(posterior)  #for posterior draws
library(ggeffects)  #for partial effects plots
library(patchwork)  #for multi-panel figures
library(bayestestR) #for ROPE
library(see)        #for some plots
library(readxl)     #to load excel documents
library(easystats)     #framework for stats, modelling and visualisation
#library(INLA)       #for approximate Bayes
library(openxlsx)    # to write excel documents
#library(INLAutils)  #for additional INLA outputs
theme_set(theme_grey()) #put the default ggplot theme back
source('helperFunctions.R')
```

# Read in the data

```{r}
survival <- read_excel("data/YEAR1_Survival.xlsx", na ="")

environment <- read_excel ("data/YEAR1 Benthic Environment ReefDev.xlsx", na="")
```

# Exploratory data

```{r}
glimpse(survival)
head(survival)
str(survival)
survival |> datawizard::data_codebook()
```

Remove some unnecessary columns

```{r}
survival <- survival |>
  select(-c(ID, Observer, CensusT, DeploymentDate, CensusDate, Device_ID))
```

Subset data: moore yield (device level)

```{r}
moore_surv <- survival |> filter (Reef == "Moore",
                             Tab_ID == 1) |>
  select(-c(Tab_ID, SurvTab, LinLength_mm, Height_mm, PerpLenght_mm)) |>
  mutate(Site = as.factor(Site),
         ReefDev = as.factor(ReefDev),
         Census = as.factor(Census))

moore_env <- environment |> 
  filter (Reef == "Moore") |>
  select(-c(Reef1, Device_ID)) |>
  rename(turf = sedturf_t5,
         concrete = sedconcrete_t5)
```

Merge survival and environment

```{r}
# create one dataset - merge survival and environmental data
moore <- merge(moore_env, moore_surv, by = c("Reef", "Site", "ReefDev"), all = TRUE)

#free up space
remove(moore_surv, moore_env)

# Remove rows with missing values
moore$SurvDev <- as.numeric(moore$SurvDev)
moore <- moore[complete.cases(moore$SurvDev),  ]
moore <- moore[complete.cases(moore$PC1),  ]
moore <- moore |> select(-c(sedturf_t2, sedconcrete_t2))
```

Create subsets

```{r}
#subset data to have survival at final timepoint only
moore_t6 <- moore |>
  filter(Census == "t6")

#subset data to have survival for all census points except t0 at which survival is 100%, and census t2, t3 and t5 at whihc not all sites were censused
moore_subset <- moore |>
  filter(!Census %in% c("t0", "t2", "t3", "t5"))
```

# GLM

```{r}
library(lme4)

moore_glm_census<- glm(SurvDev ~ Census, data=moore_subset, family = binomial(link = "logit"))
moore_glmer_site<- glmer(SurvDev ~ (1|Site), data=moore_subset, family = binomial(link = "logit"))
moore_glmer<- glmer(SurvDev ~ Census + (1|Site), data=moore_subset, family = binomial(link = "logit"))

moore_glmer_speed <- glmer(SurvDev ~ median_speed + (1|Site), data = moore_t6, family = binomial(link = "logit"))
moore_glmer_speed_interaction <- glmer(SurvDev ~ Census * median_speed + (1|Site), data=moore_subset, family = binomial(link = "logit"))


AIC(moore_glm_census, moore_glmer_site,moore_glmer, moore_glmer_speed, moore_glmer_speed_interaction)
```

GLMs with environmental paramaters + census time (main effects)

```{r}
moore_glmer_speed_main <- glmer(SurvDev ~ Census + median_speed + (1|Site), 
                                        data=moore_subset, 
                                        family = binomial(link = "logit"))
moore_glmer_wave_main <- glmer(SurvDev ~ Census + WaveEnergyLevel + (1|Site), 
                                       data=moore_subset, 
                                       family = binomial(link = "logit"))
moore_glmer_ub_main <- glmer(SurvDev ~ Census + Ub_avrg + (1|Site), 
                                     data=moore_subset, 
                                     family = binomial(link = "logit"))
moore_glmer_turf_main <- glmer(SurvDev ~ Census + turf + (1|Site), 
                                data = moore_subset, 
                                family = binomial(link = "logit"))
moore_glmer_concrete_main <- glmer(SurvDev ~ Census + concrete + (1|Site), 
                                           data=moore_subset, 
                                           family = binomial(link = "logit"))
moore_glmer_PCA_main <- glmer(SurvDev ~ Census + PC1 + PC2 + (1|Site),
                                      data=moore_subset, 
                                      family = binomial(link = "logit"))
```

GLMs with environmental paramaters \* census time (interactions)

```{r}
moore_glmer_speed_interaction <- glmer(SurvDev ~ Census * median_speed + (1|Site), 
                                        data=moore_subset, 
                                        family = binomial(link = "logit"))
moore_glmer_wave_interaction <- glmer(SurvDev ~ Census * WaveEnergyLevel + (1|Site), 
                                       data=moore_subset, 
                                       family = binomial(link = "logit"))
moore_glmer_ub_interaction <- glmer(SurvDev ~ Census * Ub_avrg + (1|Site), 
                                     data=moore_subset, 
                                     family = binomial(link = "logit"))
moore_glmer_turf_interaction <- glmer(SurvDev ~ Census * turf + (1|Site), 
                                       data=moore_subset, 
                                       family = binomial(link = "logit"))
moore_glmer_concrete_interaction <- glmer(SurvDev ~ Census * concrete + (1|Site), 
                                           data=moore_subset, 
                                           family = binomial(link = "logit"))
moore_glmer_PCA_interaction <- glmer(SurvDev ~ (Census * PC1) + (Census * PC2) + (1|Site),
                                      data=moore_subset, 
                                      family = binomial(link = "logit"))
```

```{r}
AIC(moore_glmer_speed_main, moore_glmer_wave_main, moore_glmer_ub_main, moore_glmer_turf_main, moore_glmer_concrete_main, moore_glmer_PCA_main, 
  moore_glmer_speed_interaction, moore_glmer_wave_interaction, moore_glmer_ub_interaction, moore_glmer_turf_interaction,  moore_glmer_concrete_interaction, moore_glmer_PCA_interaction)
```

**OUTPUT**: Main effects models have fewer parameters than the interaction models, but the interaction models generally have a lower AIC, with wave, PCA and Ub interactions having the lowest AIC values (\~825). It makes biological sense to keep the interaction in. Also note that I have removed the census timepoints t2, t3 and t5 because not all sites were censused (if running the models with these timepoints included, there are convergence issues with the interaction models).

### Speed

```{r}
summary(moore_glmer_speed_main)
summary(moore_glmer_speed_interaction)
```

For flow velocity (speed), census time has a significant negative effect on survival - meaining that survival decreases with time (duh). In the main effect model, median speed does not have a significant effect on survival, but in the interaction model, median speed does have a significant effect on survival, and also in interaction with census time: Census**t4** \* medianspeed (p=0.039) and Census**t6** \* median speed (p = 0.004). Suggesting that the effect of flow changes across the different census time points. Indeed, when looking at the ggplot (below) with census time facet wrapped, we can see that at **t6**, the plot shows almost no effect of flow on survival, whereas at earlier t1 and t4 the effect is clearly negative. Thus, the statistical significance of the interaction for t6 highlights the fact that there is a more distinct change in the relationship between flow and survival at t6 compared to the earlier timepoints, with the magnitude to fthe effect of flow being much weaker at t6 cpmparer to at t1 and t4 (where survival decreased with increasing flow).

```{r}
ggplot(data=moore_t6, aes(y = SurvDev, x = median_speed)) + 
  geom_point(position = position_jitter(width = 0.01, height = 0)) +
  geom_smooth(method="lm")

#with facetwrap by Census time
ggplot(data=moore_subset, aes(y = SurvDev, x = median_speed)) + 
  geom_point(position = position_jitter(width = 0.01, height = 0)) +
  facet_wrap(~Census) +
  geom_smooth(method="lm")
```

-   **T1**: There's a clear negative relationship between `median_speed` and `SurvDev`. As `median_speed` increases, survival decreases.

-   **T4**: The relationship between `median_speed` and `SurvDev` is also negative, similar to `t1`, but the survival starts at a lower point.

-   **T6**: The effect looks much weaker here, with the line almost flat. The survival rate doesn't seem to change much across different `median_speed` values, suggesting that the effect is minimal at this timepoint.

### Wave Energy Level

```{r}
summary(moore_glmer_ub_main)
summary(moore_glmer_ub_interaction)
```

Output: similar patterns for Ub as for flow velocity above. With interaction affects between census and Ub_avrerage showing significant change over time.

```{r}
ggplot(data=moore_t6, aes(y = SurvDev, x = Ub_avrg)) + 
  geom_point(position = position_jitter(width = 0.01, height = 0)) +
  geom_smooth(method="lm")

#with facetwrap by Census time
ggplot(data=moore_subset, aes(y = SurvDev, x = Ub_avrg)) + 
  geom_point(position = position_jitter(width = 0.01, height = 0)) +
  facet_wrap(~Census) +
  geom_smooth(method="lm")
```

-   **T1** - There's a clear negative relationship between `Ub_avrg` and survival (`SurvDev`). As `Ub_avrg` increases, survival decreases substantially, which is consistent with the negative effect seen in the model.

-   **T4** - The slope is still negative, but the starting point is much lower. The range of survival values is wider at `t4`, and the confidence interval (grey ribbon) becomes larger, suggesting more uncertainty in the effect of `Ub_avrg` on survival at this timepoint.

-   **T6** - The effect of `Ub_avrg` is weaker at `t6`. The slope of the line is nearly flat, and survival appears to be mostly independent of `Ub_avrg`. The large confidence interval also indicates a lot of variability in the data.

# \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

# Brm with census

##### Census

```{r}
moore_form_census <- bf(SurvDev ~ Census + (1|Site), family = bernoulli(link='logit'))

priors_census <- 
  prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
  prior(student_t(3, 0, 1.5), class = 'sd')

moore_brm_census <- brm(moore_form_census,
                 data=moore_subset,
                 prior = priors_census,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                backend = "rstan")

# To save the model use >> 
#save(moore_brm_census, file = "scripts/models/moore/moore_brm_census.RData")
```

Model diagnostics

```{r}
moore_brm_census |> pp_check(type = 'dens_overlay', ndraws = 100)
moore_brm_census |> pp_check (type = "error_scatter_avg")
moore_brm_census  |> pp_check(group = 'Site', type = 'violin_grouped')

moore.resids_census<- make_brms_dharma_res(moore_brm_census, integerResponse = FALSE)
testUniformity(moore.resids_census)
plotResiduals(moore.resids_census)
testDispersion(moore.resids_census)
```

##### Wave interaction

```{r}
moore_form_wave_interaction <-  bf(SurvDev ~ WaveEnergyLevel * Census + (1|Site), family = bernoulli(link='logit'))

prior <- c(
  set_prior("normal(-3, 1)", class = "b", coef = "WaveEnergyLevel"),             # Tighter prior for median_speed
  set_prior("normal(-2, 1)", class = "b", coef = "Censust4"),            # Tighter prior for Census t4 effect
  set_prior("normal(-4, 1)", class = "b", coef = "Censust6"),            # Tighter prior for Census t6 effect
  set_prior("normal(5, 2)", class = "b", coef = "WaveEnergyLevel:Censust4"),     # Prior for interaction at t4
  set_prior("normal(10, 2)", class = "b", coef = "WaveEnergyLevel:Censust6"),    # Prior for interaction at t6
  set_prior("normal(0, 1)", class = "Intercept"),                        # Stronger prior for intercept
  set_prior("student_t(3, 0, 2)", class = "sd", group = "Site")          # Prior for random effect on Site
)

moore_brm_wave_interaction <- brm(moore_form_wave_interaction,
                 data=moore_subset,
                 prior = prior,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                backend = "rstan")

# To save the model use >> 
#save(moore_brm_wave_interaction, file = "scripts/models/moore/moore_brm_wave_interaction.RData")
```

Model diagnostics

```{r}
moore_brm_wave_interaction |> pp_check(type = 'dens_overlay', ndraws = 100)
moore_brm_wave_interaction |> pp_check (type = "error_scatter_avg")
moore_brm_wave_interaction  |> pp_check(group = 'Site', type = 'violin_grouped')

moore.resids_wave<- make_brms_dharma_res(moore_brm_wave_interaction, integerResponse = FALSE)
testUniformity(moore.resids_wave)
plotResiduals(moore.resids_wave)
testDispersion(moore.resids_wave)
```

##### Ub interaction

```{r}
moore_form_ub_interaction <-    bf(SurvDev ~ Ub_avrg * Census + (1|Site), family = bernoulli(link='logit'))

prior <- c(
  set_prior("normal(-3, 1)", class = "b", coef = "Ub_avrg"),             # Tighter prior for median_speed
  set_prior("normal(-2, 1)", class = "b", coef = "Censust4"),            # Tighter prior for Census t4 effect
  set_prior("normal(-4, 1)", class = "b", coef = "Censust6"),            # Tighter prior for Census t6 effect
  set_prior("normal(5, 2)", class = "b", coef = "Ub_avrg:Censust4"),     # Prior for interaction at t4
  set_prior("normal(10, 2)", class = "b", coef = "Ub_avrg:Censust6"),    # Prior for interaction at t6
  set_prior("normal(0, 1)", class = "Intercept"),                        # Stronger prior for intercept
  set_prior("student_t(3, 0, 2)", class = "sd", group = "Site")          # Prior for random effect on Site
)

moore_brm_ub_interaction <- brm(moore_form_ub_interaction,
                 data=moore_subset,
                 prior = prior,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm_ub_interaction, file = "scripts/models/moore/moore_brm_ub_interaction.RData")
```

Model diagnostics

```{r}
moore_brm_ub_interaction |> pp_check(type = 'dens_overlay', ndraws = 100)
moore_brm_ub_interaction |> pp_check (type = "error_scatter_avg")
moore_brm_ub_interaction  |> pp_check(group = 'Site', type = 'violin_grouped')

moore.resids_ub<- make_brms_dharma_res(moore_brm_ub_interaction, integerResponse = FALSE)
testUniformity(moore.resids_ub)
plotResiduals(moore.resids_ub)
testDispersion(moore.resids_ub)
```

##### Median speed interaction

```{r}
moore_form_speed_interaction <-    bf(SurvDev ~ median_speed * Census + (1|Site), family = bernoulli(link='logit'))

prior <- c(
  set_prior("normal(-3, 1)", class = "b", coef = "median_speed"),             # Tighter prior for median_speed
  set_prior("normal(-2, 1)", class = "b", coef = "Censust4"),                 # Tighter prior for Census t4 effect
  set_prior("normal(-4, 1)", class = "b", coef = "Censust6"),                 # Tighter prior for Census t6 effect
  set_prior("normal(5, 2)", class = "b", coef = "median_speed:Censust4"),     # Prior for interaction at t4
  set_prior("normal(10, 2)", class = "b", coef = "median_speed:Censust6"),    # Prior for interaction at t6
  set_prior("normal(0, 1)", class = "Intercept"),                             # Stronger prior for intercept
  set_prior("student_t(3, 0, 2)", class = "sd", group = "Site")               # Prior for random effect on Site
)

moore_brm_speed_interaction <- brm(moore_form_speed_interaction,
                 data=moore_subset,
                 prior = prior,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm_speed_interaction, file = "scripts/models/moore/moore_brm_speed_interaction.RData")
```

Model diagnostics

```{r}
moore_brm_speed_interaction |> pp_check(type = 'dens_overlay', ndraws = 100)
moore_brm_speed_interaction |> pp_check (type = "error_scatter_avg")
moore_brm_speed_interaction  |> pp_check(group = 'Site', type = 'violin_grouped')

moore.resids_speed<- make_brms_dharma_res(moore_brm_speed_interaction, integerResponse = FALSE)
testUniformity(moore.resids_speed)
plotResiduals(moore.resids_speed)
testDispersion(moore.resids_speed)
```

##### Turf interaction

```{r}
moore_form_turf_interaction <-    bf(SurvDev ~ turf  * Census + (1|Site), family = bernoulli(link='logit'))

#prior_turf <- c(
#  set_prior("normal(2, 1)", class = "b", coef = "turf"),  # Prior for turf with a positive relationship
#  set_prior("normal(0, 2)", class = "Intercept"),         # Prior for intercept
#  set_prior("student_t(3, 0, 2)", class = "sd", group = "Site")  # Prior for random effect
#)

prior_turf_updated <- c(
  set_prior("normal(2.5, 0.5)", class = "b", coef = "turf"),           # Prior for turf, stronger positive effect
  set_prior("normal(-1.5, 0.5)", class = "b", coef = "turf:Censust4"),  # Negative prior for interaction at t4
  set_prior("normal(-1.75, 0.5)", class = "b", coef = "turf:Censust6"), # Negative prior for interaction at t6
  set_prior("normal(0, 2)", class = "Intercept"),                       # Prior for intercept
  set_prior("student_t(3, 0, 2)", class = "sd", group = "Site")         # Prior for random effects
)


moore_brm_turf_interaction <- brm(moore_form_turf_interaction,
                 data=moore_subset,
                 prior = prior_turf_updated,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm_turf_interaction, file = "scripts/models/moore/moore_brm_turf_interaction.RData")
```

Model diagnostics

```{r}
moore_brm_turf_interaction |> pp_check(type = 'dens_overlay', ndraws = 100)
moore_brm_turf_interaction |> pp_check (type = "error_scatter_avg")
moore_brm_turf_interaction  |> pp_check(group = 'Site', type = 'violin_grouped')

moore.resids_turf<- make_brms_dharma_res(moore_brm_turf_interaction, integerResponse = FALSE)
testUniformity(moore.resids_turf)
plotResiduals(moore.resids_turf)
testDispersion(moore.resids_turf)
```

##### Concrete interaction

```{r}
moore_form_concrete_interaction <- bf(SurvDev ~ concrete * Census + (1|Site), family = bernoulli(link='logit'))

#prior_concrete <- c(
#  set_prior("normal(2, 1)", class = "b", coef = "concrete"),  # Prior for concrete with a positive relationship
#  set_prior("normal(0, 2)", class = "Intercept"),         # Prior for intercept
#  set_prior("student_t(3, 0, 2)", class = "sd", group = "Site")  # Prior for random effect
#)

prior_concrete_refined <- c(
  set_prior("normal(2.5, 0.3)", class = "b", coef = "concrete"),         # Strong, narrow positive prior for concrete
  set_prior("normal(-1, 0.5)", class = "b", coef = "concrete:Censust4"),  # More precise prior for interaction at t4
  set_prior("normal(-1.5, 0.5)", class = "b", coef = "concrete:Censust6"),# More precise prior for interaction at t6
  set_prior("normal(0, 1)", class = "Intercept"),                         # Slightly tighter prior for intercept
  set_prior("normal(-1.2, 0.3)", class = "b", coef = "Censust4"),         # Tighter prior for Censust4 effect
  set_prior("normal(-1.75, 0.3)", class = "b", coef = "Censust6"),        # Tighter prior for Censust6 effect
  set_prior("student_t(3, 0, 2)", class = "sd", group = "Site")           # Keep prior for random effects unchanged
)

moore_brm_concrete_interaction <- brm(moore_form_concrete_interaction,
                 data=moore_subset,
                 prior = prior_concrete_refined,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm_concrete_interaction, file = "scripts/models/moore/moore_brm_concrete_interaction.RData")
```

Model diagnostics

```{r}
moore_brm_concrete_interaction |> pp_check(type = 'dens_overlay', ndraws = 100)
moore_brm_concrete_interaction |> pp_check (type = "error_scatter_avg")
moore_brm_concrete_interaction  |> pp_check(group = 'Site', type = 'violin_grouped')

moore.resids_concrete<- make_brms_dharma_res(moore_brm_concrete_interaction, integerResponse = FALSE)
testUniformity(moore.resids_concrete)
plotResiduals(moore.resids_concrete)
testDispersion(moore.resids_concrete)
```

##### PCA interaction

```{r}
moore_form_PCA_interaction <-    bf(SurvDev ~ (Census* PC1)  + (Census * PC2) +         (1|Site), family = bernoulli(link='logit'))

prior_PCA <- 
  prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b") +
  prior(student_t(3, 0, 1.5), class = 'sd')

prior_PCA_refined <- 
  prior(normal(1.87, 0.5), class = "Intercept") +  # Tighter around the observed intercept
  prior(normal(0, 1), class = "b", coef = "Censust4") +
  prior(normal(0, 1), class = "b", coef = "Censust6") +
  prior(normal(7, 1.5), class = "b", coef = "PC1") +  # Stronger positive prior for PC1
  prior(normal(1, 1.5), class = "b", coef = "PC2") +  # Weaker prior for PC2, allowing flexibility
  prior(normal(-5, 1.5), class = "b", coef = "Censust4:PC1") +  # Moderately negative prior for PC1 interactions
  prior(normal(-6, 1.5), class = "b", coef = "Censust6:PC1") +  # Reflect the diminishing effect
  prior(normal(-1.5, 1), class = "b", coef = "Censust4:PC2") +  # Weaker negative priors for PC2 interactions
  prior(normal(-2, 1), class = "b", coef = "Censust6:PC2") +    # Reflect the weakening effect of PC2 at t6
  prior(student_t(3, 0, 1), class = 'sd')  # Slightly tighter reflecting the estimated variability

moore_brm_PCA_interaction <- brm(moore_form_PCA_interaction,
                 data=moore_subset,
                 prior = prior_PCA_refined,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm_PCA_interaction, file = "scripts/models/moore/moore_brm_PCA_interaction.RData")
```

```{r}
moore_brm_PCA_interaction |> pp_check(type = 'dens_overlay', ndraws = 100)
moore_brm_PCA_interaction |> pp_check (type = "error_scatter_avg")
moore_brm_PCA_interaction  |> pp_check(group = 'Site', type = 'violin_grouped')

moore.resids_PCA<- make_brms_dharma_res(moore_brm_PCA_interaction, integerResponse = FALSE)
testUniformity(moore.resids_PCA)
plotResiduals(moore.resids_PCA)
testDispersion(moore.resids_PCA)
```

### Load models

```{r}
load(file = "scripts/models/moore/moore_brm_census.RData")
load(file = "scripts/models/moore/moore_brm_wave_interaction.RData")
load(file = "scripts/models/moore/moore_brm_ub_interaction.RData")
load(file = "scripts/models/moore/moore_brm_speed_interaction.RData")
load(file = "scripts/models/moore/moore_brm_turf_interaction.RData")
load(file = "scripts/models/moore/moore_brm_concrete_interaction.RData")
load(file = "scripts/models/moore/moore_brm_PCA_interaction.RData")
```

### loo ()

```{r}
#Using loo compare, lower value is better
l_census <- moore_brm_census |> loo()
l_wave <- moore_brm_wave_interaction|> loo()
l_ub <- moore_brm_ub_interaction |> loo()
l_speed <- moore_brm_speed_interaction |> loo()
l_turf <- moore_brm_turf_interaction|> loo()
l_concrete <- moore_brm_concrete_interaction|> loo()
l_PCA <- moore_brm_PCA_interaction|> loo()

looic(moore_brm_census)                #  LOOIC: 826.47 [24.13]
looic(moore_brm_wave_interaction)      #  LOOIC: 811.28 [25.26]]
looic(moore_brm_ub_interaction)        #  LOOIC: 808.76 [24.28]
looic(moore_brm_speed_interaction)     #  LOOIC: 821.44 [24.36]
looic(moore_brm_turf_interaction)      #  LOOIC: 810.47 [25.02]
looic(moore_brm_concrete_interaction)  #  LOOIC: 823.15 [24.65]
looic(moore_brm_PCA_interaction)       #  LOOIC: 807.92 [23.72]

loo_compare(l_census, l_speed, l_ub, l_wave, l_turf, l_concrete, l_PCA)
```

**NOTES ON THIS:** Moore_PCA is the best performing model, with ub being quite comparable. The model with only census time and site is the worst performing model, which means that the models that include the environmental drivers are better at predicting survival and that census and site only are not good on their own to explain variability in survival (but additional covariates are important) Yay!\
\
**PCA Interaction Model**: The **PCA interaction model** performs best out of all the models. This suggests that incorporating **PC1 and PC2**, along with their interactions with census timepoints, captures the key variability in survival. This makes sense given that the principal components likely summarize important community composition and environmental drivers.

**Weaker Predictors**: The models based on **speed** and **concrete** are not as predictive, indicating that these variables may play a less significant role in explaining survival outcomes.

### Summary

```{r}
summary(moore_brm_census)
summary(moore_brm_wave_interaction)
summary(moore_brm_ub_interaction)
summary(moore_brm_speed_interaction)
summary(moore_brm_turf_interaction)
summary(moore_brm_concrete_interaction)
summary(moore_brm_PCA_interaction)
```

### \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

# Brm with Final timepoint

##### Site

```{r}
moore_form_t6 <- bf(SurvDev ~ (1|Site), family = bernoulli(link='logit'))

priors <- prior(normal(0, 1.7), class = "Intercept") +
    prior(student_t(3, 0, 1.5), class = 'sd')

moore_brm8_t6 <- brm(moore_form_t6,
                 data=moore_t6,
                 prior = priors,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                backend = "rstan")

# To save the model use >> 
#save(moore_brm8_t6, file = "scripts/models/moore_brm8_t6.RData")
```

##### Wave

```{r}
moore_form_t6_wave <-  bf(SurvDev ~ WaveEnergyLevel + (1|Site), family = bernoulli(link='logit'))

priors_wave <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,1), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

moore_brm9_t6_wave <- brm(moore_form_t6_wave,
                 data=moore_t6,
                 prior = priors_wave,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                backend = "rstan")

# To save the model use >> 
#save(moore_brm9_t6_wave, file = "scripts/models/moore_brm9_t6_wave.RData")
```

##### Ub

```{r}
moore_form_t6_Ub <-    bf(SurvDev ~  Ub_avrg +         (1|Site), family = bernoulli(link='logit'))

priors_Ub <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,6), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

moore_brm10_t6_Ub <- brm(moore_form_t6_Ub,
                 data=moore_t6,
                 prior = priors_Ub,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm10_t6_Ub, file = "scripts/models/moore_brm10_t6_Ub.RData")
```

##### Speed

```{r}
moore_form_t6_current <-    bf(SurvDev ~  median_speed +         (1|Site), family = bernoulli(link='logit'))

priors_speed <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,40), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

moore_brm11_t6_current <- brm(moore_form_t6_current,
                 data=moore_t6,
                 prior = priors_speed,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm11_t6_current, file = "scripts/models/moore_brm11_t6_current.RData")
```

##### turf

```{r}
moore_form_t6_turf <-    bf(SurvDev ~  turf +         (1|Site), family = bernoulli(link='logit'))

priors_turf <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

moore_brm12_t6_turf <- brm(moore_form_t6_turf,
                 data=moore_t6,
                 prior = priors_turf,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model

#save(moore_brm12_t6_turf, file = "scripts/models/moore_brm12_t6_turf.RData")
```

##### concrete

```{r}
moore_form_t6_concrete <-    bf(SurvDev ~  concrete +         (1|Site), family = bernoulli(link='logit'))

priors_concrete <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,5), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

moore_brm13_t6_concrete  <- brm(moore_form_t6_concrete,
                 data=moore_t6,
                 prior = priors_concrete,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm13_t6_concrete, file = "scripts/models/moore_brm13_t6_concrete.RData")
```

##### PCA

```{r}
moore_form_t6_PCA <-    bf(SurvDev ~  PC1 + PC2 + (1|Site), family = bernoulli(link='logit'))

priors_PCA <- prior(normal(0, 1.7), class = "Intercept") +
  prior(normal(0,8), class = "b")  +
   prior(student_t(3, 0, 1.5), class = 'sd')

moore_brm14_t6_PCA  <- brm(moore_form_t6_PCA,
                 data=moore_t6,
                 prior = priors_PCA,
                 sample_prior = 'yes',
                 iter = 5000,
                 warmup = 1000,
                 chains = 3, cores = 3,
                 thin = 5,
                 refresh = 0,
                 control = list(adapt_delta = 0.99),
                 backend = "rstan")

# Save the model
#save(moore_brm14_t6_PCA, file = "scripts/models/moore_brm14_t6_PCA.RData")
```

### Load models (t6)

```{r}
setwd("C:/Users/sjurriaa/Australian Institute of Marine Science/Carly Randall - Randall Lab/CAD/CAD Year1/")
load(file = "scripts/models/moore/moore_brm8_t6.RData")
load(file = "scripts/models/moore/moore_brm9_t6_wave.RData")
load(file = "scripts/models/moore/moore_brm10_t6_Ub.RData")
load(file = "scripts/models/moore/moore_brm11_t6_current.RData")
load(file = "scripts/models/moore/moore_brm12_t6_turf.RData")
load(file = "scripts/models/moore/moore_brm13_t6_concrete.RData")
load(file = "scripts/models/moore/moore_brm14_t6_PCA.RData")
```

### loo (t6)

```{r}
l_brm_t6 <- moore_brm8_t6 |> loo()
l_wave_t6 <- moore_brm9_t6_wave|> loo()
l_Ub_t6 <- moore_brm10_t6_Ub |> loo()
l_current_t6 <- moore_brm11_t6_current |> loo()
l_turf_t6 <- moore_brm12_t6_turf|> loo()
l_concrete_t6 <- moore_brm13_t6_concrete|> loo()
l_PCA_t6 <- moore_brm14_t6_PCA|> loo()

looic(moore_brm8_t6)           #  LOOIC: 261.20   [15.93]
looic(moore_brm9_t6_wave)     #  LOOIC: 262.38   [16.18]
looic(moore_brm10_t6_Ub)      #  LOOIC: 261.86   [15.96]
looic(moore_brm11_t6_current)  #  LOOIC: 262.17   [16.19]
looic(moore_brm12_t6_turf)      #  LOOIC: 262.56   [16.11]
looic(moore_brm13_t6_concrete)       #  LOOIC: 262.60   [16.21]
looic(moore_brm14_t6_PCA)       #  LOOIC: 265.15   [16.39]

loo_compare(l_brm_t6, l_wave_t6, l_Ub_t6, l_current_t6, l_turf_t6, l_concrete_t6, l_PCA_t6)
```

NOTES ON THIS:

```         
```

```         
```

#### 

```         
```

#### 

### Summary

```{r}
moore_brm8_t6 |> summary()
moore_brm9_t6_wave|> summary()
moore_brm10_t6_Ub|> summary()
moore_brm11_t6_current|> summary()
moore_brm12_t6_turf|> summary()
moore_brm13_t6_concrete|> summary()
moore_brm14_t6_PCA|> summary()
```

```{r}
moore_brm8_t6 |> r2_loo()
moore_brm9_t6_wave|> r2_loo()
moore_brm10_t6_Ub|> r2_loo()
moore_brm11_t6_current|> r2_loo()
moore_brm12_t6_turf|> r2_loo()
moore_brm13_t6_concrete|> r2_loo()
moore_brm14_t6_PCA|> r2_loo()

```

### Site specific effects using ranef()

```{r}
#moore_form_t6 <- bf(SurvDev ~ (1|Site), family = bernoulli(link='logit'))
#moore_brm8_t6

moore_site_effects_brm8 <- ranef(moore_brm8_t6)$Site
moore_site_effects_brm8

```

**Ranef**: compute random effects for each site in the model \`moore_brm8_t6\`. These random effects represent deviations of each site from the overall intercept.

\- Intercept: the baseline or average effect across all sites.

\- Estimate: estimated deviation of each site from the overall intercept.

\- Est.Error: standard error associated with each estimate.

\- Q2.5-Q97.5: CI interval for the estimate.

These random effects can be interpreted as how much each site's survival rate deviates from the average survival rate across all sites after accounting for other fixed and random effects in the model. Positive values indicate that the site's survival rate is higher than the average, while negative values indicate lower survival rates. The credible intervals give you a sense of the uncertainty associated with these estimates.

From this we can see that only **M1A** is different from M3A, M3B and M4B and M5A.

### R2

```{r}
# Store models in a list
models <- list(
  moore_brm = moore_brm_census,
  moore_brm_speed = moore_brm_speed_interaction,
  moore_brm_wave = moore_brm_wave_interaction,
  moore_brm_Ub = moore_brm_ub_interaction,
  moore_brm_turf = moore_brm_turf_interaction,
  moore_brm_concrete = moore_brm_concrete_interaction,
  moore_brm_PC1 = moore_brm_PCA_interaction
)

# Apply operations and store results in a list
results <- lapply(models, function(model) {
  model |>
    bayes_R2(summary = FALSE) |>
    median_hdci()
})

# Print the list of results
print(results)

```

# \-\-\-\-- Figures \-\-\-\--

### Conditional effects

```{r}
moore_brm_census |> conditional_effects() |> plot(points=TRUE)
moore_brm_wave_interaction |> conditional_effects() |> plot(points=TRUE)
moore_brm_ub_interaction |> conditional_effects() |> plot(points=TRUE)
moore_brm_speed_interaction |> conditional_effects() |> plot(points=TRUE)
moore_brm_turf_interaction |> conditional_effects() |> plot(points=TRUE)
moore_brm_concrete_interaction |> conditional_effects() |> plot(points=TRUE)
moore_brm_PCA_interaction |> conditional_effects() |> plot(points=TRUE)
```

```{r}
moore_variables <- moore_subset |>
  select(c(Census, SurvDev, Ub_avrg, WaveEnergyLevel, turf, concrete, median_speed))

moore_variables_t3 <- moore_variables |> filter (Census != "t3")

moore_variables_new <- data.frame(
  Ub_avrg = NA,  # Use NA since there are no actual values
  WaveEnergyLevel = NA,
  turf = NA,
  concrete = NA,
  median_speed = NA,
  SurvDev = NA, 
  Census = "t3"
)

# Combine the new species data with the original moore data
moore_combined <- rbind(moore_variables_t3, moore_variables_new)

# Adjust the factor levels of the Census variable to reorder the legend
moore_combined$Census <- factor(moore_combined$Census, levels = c("t1", "t4", "t6", "t3"))
moore_combined <- moore_combined |>   filter(!is.na(Census))

remove(moore_variables_new)
```

##### Census

```{r}
# Generate the conditional effects for both species together
moore_conditional_effects_brmCensus <- conditional_effects(moore_brm_census, effects = "Census")

# Extract the data for the census effect
census_effects_data <- moore_conditional_effects_brmCensus$Census
```

```{r}
# Plot the effects for each census time
plot_moore_census <- ggplot(census_effects_data, aes(x = Census, y = estimate__,)) +
  geom_point(position = position_dodge(width = 0.5), size = 3) +
  geom_errorbar(aes(ymin = lower__, ymax = upper__), position = position_dodge(width = 0.5), width = 0.2) +
  
  # Add jittered raw data points for individual observations
  geom_jitter(data = moore_variables, 
              aes(x = Census, y = SurvDev), 
              alpha = 0.5, width = 0.05, height = 0) +
  
  labs(y = "Survival probability", x = "Time") +
      theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  )

# Display the plot
print(plot_moore_census)
```

##### Bottom Stress

Generate conditional effects for each timepoint

```{r}
moore_conditional_effects_brmUb_t1 <- conditional_effects(moore_brm_ub_interaction, conditions = data.frame(Census = "t1"))
moore_conditional_effects_brmUb_t4 <- conditional_effects(moore_brm_ub_interaction, conditions = data.frame(Census = "t4"))
moore_conditional_effects_brmUb_t6 <- conditional_effects(moore_brm_ub_interaction, conditions = data.frame(Census = "t6"))
```

```{r}
# Plot the effects with separate lines and ribbons for each species
plot_moore_Ub <- ggplot() +
  geom_line(data = moore_conditional_effects_brmUb_t1$Ub_avrg, aes(x = Ub_avrg, y = estimate__), color = "orange") +
  geom_ribbon(data = moore_conditional_effects_brmUb_t1$Ub_avrg, aes(x = Ub_avrg, ymin = lower__, ymax = upper__), fill = "orange", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmUb_t4$Ub_avrg, aes(x = Ub_avrg, y = estimate__), color = "#009E73") +
  geom_ribbon(data = moore_conditional_effects_brmUb_t4$Ub_avrg, aes(x = Ub_avrg, ymin = lower__, ymax = upper__), fill = "#009E73", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmUb_t6$Ub_avrg, aes(x = Ub_avrg, y = estimate__), color = "#0072B2") +
  geom_ribbon(data = moore_conditional_effects_brmUb_t6$Ub_avrg, aes(x = Ub_avrg, ymin = lower__, ymax = upper__), fill = "#0072B2", alpha = 0.3) +
  
  geom_jitter(data = moore_combined, 
              aes(x = Ub_avrg, y = SurvDev, color = Census), 
              alpha = 0.5, width = 0.05, height = 0) +
   labs(x = "Bottom stress\n(m s-1)", y =  NULL, color = "Census time") + 
  scale_color_manual(
    values = c("t1" = "orange", "t4" = "#009E73", "t6" = "#0072B2", "t3" = "#F0E442"),  
    labels = c("t1" = "3 months", 
               "t4" = "10-14 months", 
               "t6" = "17 months",
               "t3" = "28 months")
  ) +
  theme_minimal() +
 theme( axis.text.x = element_text(size = 12),  # Increase x-axis tick label size
  axis.text.y = element_text(size = 12),  # Increase y-axis tick label size.
  axis.title.x = element_text(size = 13),  # Increase x-axis title size
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.y = element_blank()
  )

print(plot_moore_Ub)

```

##### Wave Energy

Generate conditional effects for each timepoint

```{r}
moore_conditional_effects_brmwave_t1 <- conditional_effects(moore_brm_wave_interaction, conditions = data.frame(Census = "t1"))
moore_conditional_effects_brmwave_t4 <- conditional_effects(moore_brm_wave_interaction, conditions = data.frame(Census = "t4"))
moore_conditional_effects_brmwave_t6 <- conditional_effects(moore_brm_wave_interaction, conditions = data.frame(Census = "t6"))
```

```{r}
# Plot the effects with separate lines and ribbons for each species
plot_moore_wave <- ggplot() +
  geom_line(data = moore_conditional_effects_brmwave_t1$WaveEnergyLevel, aes(x = WaveEnergyLevel, y = estimate__), color = "orange") +
  geom_ribbon(data = moore_conditional_effects_brmwave_t1$WaveEnergyLevel, aes(x = WaveEnergyLevel, ymin = lower__, ymax = upper__), fill = "orange", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmwave_t4$WaveEnergyLevel, aes(x = WaveEnergyLevel, y = estimate__), color = "#009E73") +
  geom_ribbon(data = moore_conditional_effects_brmwave_t4$WaveEnergyLevel, aes(x = WaveEnergyLevel, ymin = lower__, ymax = upper__), fill = "#009E73", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmwave_t6$WaveEnergyLevel, aes(x = WaveEnergyLevel, y = estimate__), color = "#0072B2") +
  geom_ribbon(data = moore_conditional_effects_brmwave_t6$WaveEnergyLevel, aes(x = WaveEnergyLevel, ymin = lower__, ymax = upper__), fill = "#0072B2", alpha = 0.3) +
  
  geom_jitter(data = moore_combined, 
              aes(x = WaveEnergyLevel, y = SurvDev, color = Census), 
              alpha = 0.5, width = 0.2, height = 0) +
  labs(x = "Nom. Wave Energy Level\n", y = NULL, color = "Census time") + 
scale_color_manual(
    values = c("t1" = "orange", "t4" = "#009E73", "t6" = "#0072B2", "t3" = "#F0E442"),  
    labels = c("t1" = "3 months", 
               "t4" = "10-14 months", 
               "t6" = "17 months",
               "t3" = "28 months")
  ) +
  theme_minimal() +
 theme( axis.text.x = element_text(size = 12),  # Increase x-axis tick label size
  axis.text.y = element_text(size = 12),  # Increase y-axis tick label size.
  axis.title.x = element_text(size = 13),  # Increase x-axis title size
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.y = element_blank()
      )

print(plot_moore_wave)

```

##### Flow Velocity

Generate conditional effects for each timepoint

```{r}
moore_conditional_effects_brmspeed_t1 <- conditional_effects(moore_brm_speed_interaction, conditions = data.frame(Census = "t1"))
moore_conditional_effects_brmspeed_t4 <- conditional_effects(moore_brm_speed_interaction, conditions = data.frame(Census = "t4"))
moore_conditional_effects_brmspeed_t6 <- conditional_effects(moore_brm_speed_interaction, conditions = data.frame(Census = "t6"))
```

```{r}
# Plot the effects with separate lines and ribbons for each species
plot_moore_speed <- ggplot() +
  geom_line(data = moore_conditional_effects_brmspeed_t1$median_speed, aes(x = median_speed, y = estimate__), color = "orange") +
  geom_ribbon(data = moore_conditional_effects_brmspeed_t1$median_speed, aes(x = median_speed, ymin = lower__, ymax = upper__), fill = "orange", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmspeed_t4$median_speed, aes(x = median_speed, y = estimate__), color = "#009E73") +
  geom_ribbon(data = moore_conditional_effects_brmspeed_t4$median_speed, aes(x = median_speed, ymin = lower__, ymax = upper__), fill = "#009E73", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmspeed_t6$median_speed, aes(x = median_speed, y = estimate__), color = "#0072B2") +
  geom_ribbon(data = moore_conditional_effects_brmspeed_t6$median_speed, aes(x = median_speed, ymin = lower__, ymax = upper__), fill = "#0072B2", alpha = 0.3) +
  
  geom_jitter(data = moore_combined, 
              aes(x = median_speed, y = SurvDev, color = Census), 
              alpha = 0.5, width = 0.01, height = 0) +
  labs(x = "Median flow velocity\n(m s-1)", y =  NULL, color = "Census time") + 
  scale_color_manual(
    values = c("t1" = "orange", "t4" = "#009E73", "t6" = "#0072B2", "t3" = "#F0E442"),  
    labels = c("t1" = "3 months", 
               "t4" = "10-14 months", 
               "t6" = "17 months",
               "t3" = "28 months")
  ) +
  theme_minimal() +
   theme( axis.text.x = element_text(size = 12),  # Increase x-axis tick label size
  axis.text.y = element_text(size = 12),  # Increase y-axis tick label size.
  axis.title.x = element_text(size = 13),  # Increase x-axis title size
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.y = element_blank()
   )

print(plot_moore_speed)

```

##### Turf

```{r}
moore_conditional_effects_brmturf_t1 <- conditional_effects(moore_brm_turf_interaction, conditions = data.frame(Census = "t1"))
moore_conditional_effects_brmturf_t4 <- conditional_effects(moore_brm_turf_interaction, conditions = data.frame(Census = "t4"))
moore_conditional_effects_brmturf_t6 <- conditional_effects(moore_brm_turf_interaction, conditions = data.frame(Census = "t6"))
```

```{r}
# Plot the effects with separate lines and ribbons for each species
plot_moore_turf <- ggplot() +
  geom_line(data = moore_conditional_effects_brmturf_t1$turf, aes(x = turf, y = estimate__), color = "orange") +
  geom_ribbon(data = moore_conditional_effects_brmturf_t1$turf, aes(x = turf, ymin = lower__, ymax = upper__), fill = "orange", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmturf_t4$turf, aes(x = turf, y = estimate__), color = "#009E73") +
  geom_ribbon(data = moore_conditional_effects_brmturf_t4$turf, aes(x = turf, ymin = lower__, ymax = upper__), fill = "#009E73", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmturf_t6$turf, aes(x = turf, y = estimate__), color = "#0072B2") +
  geom_ribbon(data = moore_conditional_effects_brmturf_t6$turf, aes(x = turf, ymin = lower__, ymax = upper__), fill = "#0072B2", alpha = 0.3) +
  
  geom_jitter(data = moore_combined, 
              aes(x = turf, y = SurvDev, color = Census), 
              alpha = 0.5, width = 0.05, height = 0) +
  labs(x = "Sedimentation on turf\n(mg cm-2 day-1)", y = NULL, color = "Census time") + 
  scale_color_manual(
    values = c("t1" = "orange", "t4" = "#009E73", "t6" = "#0072B2", "t3" = "#F0E442"),  
    labels = c("t1" = "3 months", 
               "t4" = "10-14 months", 
               "t6" = "17 months",
               "t3" = "28 months")
  ) +
  theme_minimal() +
 theme( axis.text.x = element_text(size = 12),  # Increase x-axis tick label size
  axis.text.y = element_text(size = 12),  # Increase y-axis tick label size.
  axis.title.x = element_text(size = 13),  # Increase x-axis title size
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.y = element_blank()
  )

print(plot_moore_turf)

```

##### Concrete

```{r}
moore_conditional_effects_brmconcrete_t1 <- conditional_effects(moore_brm_concrete_interaction, conditions = data.frame(Census = "t1"))
moore_conditional_effects_brmconcrete_t4 <- conditional_effects(moore_brm_concrete_interaction, conditions = data.frame(Census = "t4"))
moore_conditional_effects_brmconcrete_t6 <- conditional_effects(moore_brm_concrete_interaction, conditions = data.frame(Census = "t6"))
```

```{r}
# Plot the effects with separate lines and ribbons for each species
plot_moore_concrete <- ggplot() +
  geom_line(data = moore_conditional_effects_brmconcrete_t1$concrete, aes(x = concrete, y = estimate__), color = "orange") +
  geom_ribbon(data = moore_conditional_effects_brmconcrete_t1$concrete, aes(x = concrete, ymin = lower__, ymax = upper__), fill = "orange", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmconcrete_t4$concrete, aes(x = concrete, y = estimate__), color = "#009E73") +
  geom_ribbon(data = moore_conditional_effects_brmconcrete_t4$concrete, aes(x = concrete, ymin = lower__, ymax = upper__), fill = "#009E73", alpha = 0.3) +
  
  geom_line(data = moore_conditional_effects_brmconcrete_t6$concrete, aes(x = concrete, y = estimate__), color = "#0072B2") +
  geom_ribbon(data = moore_conditional_effects_brmconcrete_t6$concrete, aes(x = concrete, ymin = lower__, ymax = upper__), fill = "#0072B2", alpha = 0.3) +
  
  geom_jitter(data = moore_combined, 
              aes(x = concrete, y = SurvDev, color = Census), 
              alpha = 0.5, width = 0.05, height = 0) +
  labs(x = "Sedimentation on concrete\n(mg cm-2 day-1)", y = NULL, color = "Census time") + 
 scale_color_manual(
    values = c("t1" = "orange", "t4" = "#009E73", "t6" = "#0072B2", "t3" = "#F0E442"),  
    labels = c("t1" = "3 months", 
               "t4" = "10-14 months", 
               "t6" = "17 months",
               "t3" = "28 months")
  ) +
  theme_minimal() +
 theme( axis.text.x = element_text(size = 12),  # Increase x-axis tick label size
  axis.text.y = element_text(size = 12),  # Increase y-axis tick label size.
  axis.title.x = element_text(size = 13),  # Increase x-axis title size
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.y = element_blank()
  )

print(plot_moore_concrete)

```

### Bayes figures

Select the environmental predictors for the plots, then create empty entries for Ahya and Aten so that they appear in the figure legends (for complete species representation), and then combine the new species data with the selected moore data.

```{r}
moore_variables <- moore_t5 |>
  select(c(Spp, SurvDev, Ub_avrg, WaveEnergyLevel, sedturf_t5, sedconcrete_t5, median_speed))

moore_variables_new <- data.frame(
  Ub_avrg = NA,  # Use NA since there are no actual values
  WaveEnergyLevel = NA,
  sedturf_t5 = NA,
  sedconcrete_t5 = NA,
  median_speed = NA,
  SurvDev = NA, 
  Spp = c("A. hyacinthus", "A. kenti")
)

# Combine the new species data with the original moore data
moore_combined <- rbind(moore_variables, moore_variables_new)

remove(moore_variables)
remove(moore_variables_new)
```

##### Bottom Stress

Extract fitted values and predictors and create empty entries for Aten and Amil for complete species representation in the figure legends:

```{r}
moore_conditional_effects_brm10 <- conditional_effects(moore_brm10_t6_Ub)

# Extract the relevant data frames from the conditional_effects object
moore_conditional_effects_Ub <- moore_conditional_effects_brm10$Ub_avrg
```

Create plot:

```{r}
plot_moore_Ub <- ggplot() +
  geom_line(data = moore_conditional_effects_Ub, aes(x = Ub_avrg, y = estimate__), color = "black") +
  geom_ribbon(data = moore_conditional_effects_Ub, aes(x = Ub_avrg, ymin = lower__, ymax = upper__), 
              fill = "grey", alpha = 0.3) +
 geom_jitter(data = moore_combined, 
              aes(x = Ub_avrg, y = SurvDev, color = Spp), 
              alpha = 0.5, width = 0.05, height = 0) +
  labs(color = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. kenti" = "#009E73", "A. millepora" = "#0072B2")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

print(plot_moore_Ub)
```

##### Wave Energy Level

Extract fitted values and predictors:

```{r}
moore_conditional_effects_brm9<- conditional_effects(moore_brm9_t6_wave)

# Extract the relevant data frames from the conditional_effects object
moore_conditional_effects_wave <- moore_conditional_effects_brm9$WaveEnergyLevel
```

Create plot:

```{r}
plot_moore_wave <- ggplot() +
  geom_line(data = moore_conditional_effects_wave, aes(x = WaveEnergyLevel, y = estimate__), color = "black") +
  geom_ribbon(data = moore_conditional_effects_wave, aes(x = WaveEnergyLevel, ymin = lower__, ymax = upper__), 
              fill = "grey", alpha = 0.3) +
   geom_jitter(data = moore_combined, 
              aes(x = WaveEnergyLevel, y = SurvDev, color = Spp), 
              alpha = 0.2, width = 0.2, height = 0) +
  labs(color = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. kenti" = "#009E73", "A. millepora" = "#0072B2")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

print(plot_moore_wave)
```

##### Flow velocity

Extract fitted values and predictors:

```{r}
moore_conditional_effects_brm11 <- conditional_effects(moore_brm11_t6_current)

# Extract the relevant data frames from the conditional_effects object
moore_conditional_effects_speed <- moore_conditional_effects_brm11$median_speed
```

Create plot:

```{r}
plot_moore_speed <- ggplot() +
  geom_line(data = moore_conditional_effects_speed, aes(x = median_speed, y = estimate__), color = "black") +
  geom_ribbon(data = moore_conditional_effects_speed, aes(x = median_speed, ymin = lower__, ymax = upper__), 
              fill = "grey", alpha = 0.3) +
   geom_jitter(data = moore_combined, 
              aes(x = median_speed, y = SurvDev, color = Spp), 
              alpha = 0.5, width = 0.008, height = 0) +
  labs(color = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. kenti" = "#009E73", "A. millepora" = "#0072B2")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

# Plot the graph
plot(plot_moore_speed)
```

##### Turf

Extract fitted values and predictors:

```{r}
moore_conditional_effects_brm12 <- conditional_effects(moore_brm12_t6_turf)

# Extract the relevant data frames from the conditional_effects object
moore_conditional_effects_turf <- moore_conditional_effects_brm12$sedturf_t5
```

Create plot:

```{r}
plot_moore_turf <- ggplot() +
  geom_line(data = moore_conditional_effects_turf, aes(x = sedturf_t5, y = estimate__), color = "black") +
  geom_ribbon(data = moore_conditional_effects_turf, aes(x = sedturf_t5, ymin = lower__, ymax = upper__), 
              fill = "grey", alpha = 0.3) +
   geom_jitter(data = moore_combined, 
              aes(x = sedturf_t5, y = SurvDev, color = Spp), 
              alpha = 0.5, width = 0.1, height = 0) +
  labs(color = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. kenti" = "#009E73", "A. millepora" = "#0072B2")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

# Plot the graph
plot(plot_moore_turf)
```

##### Concrete

Extract fitted values and predictors:

```{r}
moore_conditional_effects_brm13 <- conditional_effects(moore_brm13_t6_concrete)

# Extract the relevant data frames from the conditional_effects object
moore_conditional_effects_concrete <- moore_conditional_effects_brm13$sedconcrete_t5
```

Create plot:

```{r}
plot_moore_concrete <- ggplot() +
  geom_line(data = moore_conditional_effects_concrete, aes(x = sedconcrete_t5, y = estimate__), color = "black") +
  geom_ribbon(data = moore_conditional_effects_concrete, aes(x = sedconcrete_t5, ymin = lower__, ymax = upper__), 
              fill = "grey", alpha = 0.3) +
   geom_jitter(data = moore_combined, 
              aes(x = sedconcrete_t5, y = SurvDev, color = Spp), 
              alpha = 0.5, width = 0.05, height = 0) +
  labs(color = "Species") +
  scale_color_manual(values = c("A. hyacinthus" = "orange", "A. kenti" = "#009E73", "A. millepora" = "#0072B2")) +
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    axis.ticks.length = unit(0.25, "cm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

# Plot the graph
plot(plot_moore_concrete)
```

### \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

### Save figures:

```{r}
setwd("C:/Users/sjurriaa/Australian Institute of Marine Science/Carly Randall - Randall Lab/CAD/CAD Year1/")
ggsave("output/figures survival/Moore Survival Censustime.jpeg", plot_moore_census, width = 10, height = 6)
ggsave("output/figures survival/Moore Survival Ub interaction.jpeg", plot_moore_Ub, width = 10, height = 6)
ggsave("output/figures survival/Moore Survival WaveEnergyLevel interaction.jpeg", plot_moore_wave, width = 10, height = 6)
ggsave("output/figures survival/Moore Survival Median Speed interaction.jpeg", plot_moore_speed, width = 10, height = 6)
ggsave("output/figures survival/Moore Survival Turf interaction.jpeg", plot_moore_turf, width = 10, height = 6)
ggsave("output/figures survival/Moore Survival Concrete interaction.jpeg", plot_moore_concrete, width = 10, height = 6)
```
